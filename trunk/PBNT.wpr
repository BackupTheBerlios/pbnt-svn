#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Distributions/DiscreteDistribution.py'),
                  loc('Network/BayesNet.py'),
                  loc('PBNT.wpr'),
                  loc('examples/ExampleModels.py'),
                  loc('ideas/BayesNetConstructors.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/MainTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/Inference/EnumerationEngine.py'),
                  loc('working/Inference/InferenceEngine.py'),
                  loc('working/Inference/JunctionTreeEngine.py'),
                  loc('working/Inference/MCMCEngine.py'),
                  loc('working/Learning/UpdateParams.py'),
                  loc('working/network.py'),
                  loc('working/utilities.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('testing/EnumerationTest.py'): {68: (0,
        None,
        1,
        0)},
                     loc('testing/MainTest.py'): {10: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['bnet.graph()\n'],
                             loc('testing/MainTest.py'): ['print "1"\n',
        'bnet.graph()\n',
        'all(bnet.graph == adjMat)\n',
        'bnet.graph\n',
        'adjMat\n',
        'len(ns)\n',
        'len(nodeSizes)\n',
        'nodeSizes\n',
        'size(ns)\n',
        'size(nodeSizes)\n',
        'cparents\n',
        'size(cparents)\n',
        'cchildren\n',
        'size(cchildren)\n',
        'sprinkler\n',
        'rain\n',
        'sparents\n',
        'cloudy\n',
        'schildren\n',
        'wetgrass\n',
        'rparents\n',
        'rchildren\n',
        'wgparents\n',
        'wgchildren\n',
        'array([cloudyVal])\n',
        'a = array ([cloudyVal])\n',
        'bnet.CPTs[cloudy].probabilityOf(a)\n',
        'bnet.CPTs[cloudy].probabilityOf(array([cloudyVal]))\n',
        'bnet.CPTs[cloudy].probabilityOf(array([1]))\n',
        'bnet.CPTs[rain].probabilityOf(array([cloudyVal, rainVal]))\n',
        'bnet.CPTs[rain].probabilityOf(array([1, rainVal]))\n',
        'bnet.CPTs[rain].probabilityOf(array([0, 0]))\n',
        'bnet.CPTs[rain].probabilityOf(array([1, 0]))\n',
        'bnet.CPTs[sprinkler].probabilityOf(array([cloudyVal, sprinklerVal])'\
        ')\n',
        'self.bnet\n',
        'self.bnet.ns(1)\n',
        'self.bnet.ns(queryVal)\n',
        'self.bnet.ns(queryVar)\n',
        'zeros([2], type=float)\n',
        'zeros([2], type=Float)\n',
        'DiscreteDistribution(distributionTable, 2)\n',
        'ns\n',
        '(ns - 1)\n',
        'self.evidence[node] == (ns - 1)\n',
        'if self.evidence[node] == (ns - 1):\n',
        '\tprint "hmm"\n',
        'self.evidence[node] == (ns - 1)[0]\n',
        '(self.evidence[node] == (ns - 1))[0]\n',
        'nonEvidenceNodes[numberOfNodes - 1]\n',
        'node == nonEvidenceNodes[numberOfNodes - 1]\n',
        'all(node == nonEvidenceNodes[numberOfNodes - 1])\n',
        'value\n',
        'indices\n',
        'self.CPT\n',
        'shape(self.CPT)\n',
        'size(shape(self.CPT))\n',
        'range(size(shape(self.CPT)))\n',
        'put(self.CPT, indices, value, range(shape(self.CPT)))\n',
        'put(self.CPT, indices, value, range(size(shape(self.CPT))))\n',
        'put(self.CPT, indices, value)\n',
        'put(self.CPT, indices, value, [0])\n',
        'put(self.CPT, indices, value, (0))\n',
        'put(self.CPT, indices, value, ([0]))\n',
        'a = zeros([2,3,2,2])\n',
        'a\n',
        'a[1,1,0,1] = 1\n',
        'a[0,1,1,0]=1\n',
        'take(self.CPT, indices, [0])\n',
        'take(a, array([1,1,0,1]))\n',
        'take(a, array([1,1,0,1]), [0,1,2,3])\n',
        'print engine.evidence\n',
        'engine.evidence\n',
        'Q.CPT[0]\n',
        'Q.CPT[False] == .055\n',
        'Decimal(Q.CPT[False])\n',
        'from decimal import *\n',
        'Decimal(10)\n',
        'Q.CPT[False]\n',
        'myFloatEQ(Q.CPT[False],.0550)\n',
        'myFloatEQ(Q.CPT[True],.9450)\n',
        'Q.CPT[True]\n',
        'Q.CPT[True] < .9450+0.000000000000000100\n',
        'myFloatEQ(Q.CPT[True], .9450)\n',
        'self.evidence\n',
        'nonEvidenceNodes\n',
        'node\n',
        'self.evidence[node]\n',
        'Bsuccess\n',
        'Esuccess\n',
        'Usuccess\n',
        'all(Bsuccess) and all(Esuccess)\n',
        'Q.CPT\n',
        'allclose(Q.CPT[False], .1220)\n',
        'allclose(Q.CPT[True], .8780)\n']}
debug.err-values = {None: {}}
debug.shell-history = {None: ['dist[v for v in val]\n',
                              '[v for v in val]\n',
                              'dist[[v for v in val]]\n',
                              'take(dist, val, axis=[0,1,2])\n',
                              'val\n',
                              'dist[1,0,1]\n',
                              'c = [1,2,3]\n',
                              'size(c)\n',
                              'import BayesNetTest.py\n',
                              'numberOfNodes=4\n',
                              'a = zeros([numberOfNodes, numberOfNodes], typ'\
                              'e=bool)\n',
                              'zeros([4,4], type=bool)\n',
                              'zeros([4,4])\n',
                              'zeros([4,4], type=Bool)\n',
                              'import BayesNetTest\n',
                              'BayesNetTest.test()\n',
                              'a = zeros([4,4], type=Bool)\n',
                              'b = zeros([4,4], type=Bool)\n',
                              'a == b\n',
                              'all (a==b)\n',
                              'b[0,0]=1\n',
                              'a==b\n',
                              'b[:]=1\n',
                              'all(a==b)\n',
                              'any(a==b)\n',
                              'all(bnet.graph == adjMat)\n',
                              'import BayesNetr\n',
                              'import BayesNet\n',
                              'a = array([1,1,1])\n',
                              'nonzero(a)\n',
                              'any(a)\n',
                              'a[1] = 0\n',
                              'all(a)\n',
                              'a[where(a==0)]\n',
                              'where(a==0)\n',
                              'where(a==0)[0]\n',
                              'a[1]=1\n',
                              'print where(a==0)[0]\n',
                              'a[1]=0\n',
                              'print "hmm: %s", (where(a==0)[0])\n',
                              'e = zeros([1,4])\n',
                              'e[0] =1\n',
                              'e = zeros([4])\n',
                              'e[:] = -1\n',
                              'e[0]=0\n',
                              'e[2]=1\n',
                              'ne = where(e==-1)\n',
                              'ne\n',
                              'e[ne]\n',
                              'ei = array([0,2])\n',
                              'e[ei] = -2\n',
                              'e\n',
                              'true\n',
                              'True\n',
                              'True+1\n',
                              'False\n',
                              'False+1\n',
                              'False-1\n',
                              'a = zeros([2,3,4,2])\n',
                              'shape(a)\n',
                              'len(shape(a))\n',
                              'put(a,[1,0,2,1], 1, range(size(shape(a)))) \n',
                              'print a\n',
                              'a = zeros([4])\n',
                              'size(shape(a))\n',
                              'put(a,[1], 1, range(size(shape(a)))) \n',
                              'array([array([1,0,1]), 0])\n',
                              'a.concatenate(array([1]))\n',
                              'concatenate(a, array([1]))\n',
                              'a + array([1])\n',
                              'am = reshape(array(range(16)),[4,4])\n',
                              'am = zeros([4,4])\n',
                              'am\n',
                              'am[0,1] = 1\n',
                              'nonzero(take(am, (1,),1))[0]\n',
                              'b = array((a,array([1])))\n',
                              'concatenate((a,array([1])))\n',
                              'b=concatenate((a,array([1])))\n',
                              'b\n',
                              'c = array([1,3])\n',
                              'b[c]\n',
                              'b[c,4]\n',
                              'import EnumerationEngine\n',
                              '2-1\n',
                              '(2-1)\n',
                              '3 * 2 - 1\n',
                              '3 * (2-1)\n',
                              'a\n',
                              'a = array([1, 0, 1])\n',
                              '\tprint "true"\n',
                              'else:\n',
                              '\tprint "false"\n',
                              'if a[1] == (2-1):\n',
                              'if a[1] == (2-2):\n',
                              '\tprint "hmm"\n',
                              'from utilities import *\n',
                              'myFloatEQ(0.055000000000000014, 0.0550)\n',
                              'myFloatEQ(0.055000000000000014, 0.0560)\n',
                              'from numarray import *\n',
                              'allclose(0.055000000000000014, .0550)\n']}
edit.dont-ask-to-fix-inconsistent-indents = {loc('file:C:/Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'Lm9hxFusXIfgAt4oURJH8vDaxt'\
        'PGupG4',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (1,),
                           (2,),
                           (3,),
                           (4,),
                           (5,),
                           (5,
                            0)],
        'selected-nodes': [(5,
                            4)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               None)],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [1],
        'notebook_display': 'normal',
        'notebook_percent': 0.28995057660626034,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 372,
                       'selection_start': 372}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 74,
                       'selection_end': 1578,
                       'selection_start': 1578}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 5,
                       'selection_end': 375,
                       'selection_start': 375}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': 0,
                       'replace-string': '',
                       'scope': ['current-file-batch'],
                       'search-entry-expanded': 0,
                       'search-string': '',
                       'search-style': 'text',
                       'starting-directory': 'C:\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      None)],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('Network/BayesNet.py'),
        {'first-line': 0,
         'selection_end': 589,
         'selection_start': 589},
        1122251556.125),
        (loc('testing/BayesNetTest.py'),
         {'first-line': 186,
          'selection_end': 1467,
          'selection_start': 1467},
         1122251557.671),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 0,
          'selection_end': 622,
          'selection_start': 622},
         1122251564.171),
        (loc('working/Inference/EnumerationEngine.py'),
         {'first-line': 0,
          'selection_end': 136,
          'selection_start': 136},
         1122251564.3280001),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 77,
          'selection_end': 1771,
          'selection_start': 1771},
         1122251564.5150001),
        (loc('examples/ExampleModels.py'),
         {'first-line': 0,
          'selection_end': 114,
          'selection_start': 114},
         1122251564.7179999),
        (loc('working/Inference/InferenceEngine.py'),
         {'first-line': 0,
          'selection_end': 247,
          'selection_start': 247},
         1122251564.921),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 193,
          'selection_start': 193},
         1122251565.125),
        (loc('testing/UtilitiesTest.py'),
         {'first-line': 0,
          'selection_end': 47,
          'selection_start': 47},
         1122251565.296),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 193,
          'selection_start': 193},
         1122251566.3429999),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 6,
          'selection_end': 460,
          'selection_start': 460},
         1122251574.7179999),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 193,
          'selection_start': 193},
         1122251582.6400001),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 6,
          'selection_end': 460,
          'selection_start': 460},
         1122251587.6559999),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 77,
          'selection_end': 1771,
          'selection_start': 1771},
         1122251606.0),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 89,
          'selection_start': 89},
         1122251611.75),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 496,
          'selection_start': 496},
         1122251669.9679999),
        (loc('working/Inference/EnumerationEngine.py'),
         {'first-line': 0,
          'selection_end': 136,
          'selection_start': 136},
         1122262197.4679999),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 60,
          'selection_end': 1479,
          'selection_start': 1479},
         1122270058.8429999),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 496,
          'selection_start': 496},
         1122270067.421),
        [loc('testing/EnumerationTest.py'),
         {'first-line': 60,
          'selection_end': 1478,
          'selection_start': 1478},
         1122270077.562]],
        19),
        'current-loc': loc('testing/EnumerationTest.py'),
        'editor-states': {loc('Distributions/DiscreteDistribution.py'): {'fi'\
        'rst-line': 6,
        'selection_end': 460,
        'selection_start': 460},
                          loc('examples/ExampleModels.py'): {'first-line': 0,
        'selection_end': 114,
        'selection_start': 114},
                          loc('Network/BayesNet.py'): {'first-line': 0,
        'selection_end': 589,
        'selection_start': 589},
                          loc('testing/BayesNetTest.py'): {'first-line': 186,
        'selection_end': 1467,
        'selection_start': 1467},
                          loc('testing/EnumerationTest.py'): {'first-line': 60,
        'selection_end': 1478,
        'selection_start': 1478},
                          loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 496,
        'selection_start': 496},
                          loc('testing/UtilitiesTest.py'): {'first-line': 0,
        'selection_end': 47,
        'selection_start': 47},
                          loc('working/Inference/EnumerationEngine.py'): {'f'\
        'irst-line': 0,
        'selection_end': 136,
        'selection_start': 136},
                          loc('working/Inference/InferenceEngine.py'): {'fir'\
        'st-line': 0,
        'selection_end': 247,
        'selection_start': 247},
                          loc('working/utilities.py'): {'first-line': 0,
        'selection_end': 327,
        'selection_start': 327}},
        'has-focus': False},
                               'open_files': [u'working/utilities.py',
        u'Network/BayesNet.py',
        u'testing/BayesNetTest.py',
        u'examples/ExampleModels.py',
        u'working/Inference/InferenceEngine.py',
        u'testing/UtilitiesTest.py',
        u'Distributions/DiscreteDistribution.py',
        u'working/Inference/EnumerationEngine.py',
        u'testing/MainTest.py',
        u'testing/EnumerationTest.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         254,
                         1004,
                         463)}]}
guimgr.recent-documents = [loc('testing/EnumerationTest.py'),
                           loc('testing/MainTest.py'),
                           loc('working/Inference/EnumerationEngine.py'),
                           loc('Distributions/DiscreteDistribution.py'),
                           loc('testing/UtilitiesTest.py'),
                           loc('working/Inference/InferenceEngine.py'),
                           loc('examples/ExampleModels.py'),
                           loc('testing/BayesNetTest.py'),
                           loc('Network/BayesNet.py'),
                           loc('working/utilities.py')]
guimgr.visual-state = {loc('unknown:<untitled> #1'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('file:C:/Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 525,
        'selection_end': 19612,
        'selection_start': 19612},
                       loc('file:C:/Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 114,
        'selection_end': 3159,
        'selection_start': 3159},
                       loc('file:C:/Python24/Lib/site-packages/numarray/numerictypes.py'): {''\
        'first-line': 438,
        'selection_end': 13648,
        'selection_start': 13648},
                       loc('file:C:/Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 2040,
        'selection_end': 83153,
        'selection_start': 83153},
                       loc('Factor.py'): {'first-line': 0,
        'selection_end': 606,
        'selection_start': 606},
                       loc('testing/BayesNetTest.py'): {'first-line': 0,
        'selection_end': 58,
        'selection_start': 58},
                       loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 152,
        'selection_start': 152},
                       loc('../../Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 520,
        'selection_end': 19612,
        'selection_start': 19612},
                       loc('../../Python24/myconfig.pth'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../Python24/myconfig.pth.py'): {'first-line': 0,
        'selection_end': 11,
        'selection_start': 11}}
proj.env-vars = {loc('testing/BayesNetTest.py'): ('project',
        ['']),
                 loc('testing/MainTest.py'): ('project',
        [''])}
