#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Old/General/ArrayIndexGenerator.py'),
                  loc('Old/Graph/InducedCluster.py'),
                  loc('Old/Heap/ClusterBinaryHeap.py'),
                  loc('Old/Inference/MCMCEngine.py'),
                  loc('Old/Learning/LearnParamsEM.py'),
                  loc('Old/Learning/UpdateParams.py'),
                  loc('Old/Network/BayesNet.py'),
                  loc('Old/OldJTreeIdeas.py'),
                  loc('dist/lib/pbnt/Distribution.py'),
                  loc('dist/lib/pbnt/Graph.py'),
                  loc('dist/lib/pbnt/Inference.py'),
                  loc('dist/lib/pbnt/Learning.py'),
                  loc('dist/lib/pbnt/Node.py'),
                  loc('dist/lib/pbnt/Utilities/GraphUtilities.py'),
                  loc('dist/lib/pbnt/Utilities/Utilities.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/GraphUtilitiesTest.py'),
                  loc('testing/JunctionTreeTest.py'),
                  loc('testing/MCMCEngineTest.py'),
                  loc('testing/MainTest.py'),
                  loc('testing/SequenceGeneratorTest.py'),
                  loc('testing/UtilitiesTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/network.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('testing/GraphUtilitiesTest.py'): {5: (0,
        None,
        1,
        0)},
                     loc('testing/MCMCEngineTest.py'): {113: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['a = "[1 : :]"\n',
                                    'tmp = zeros([3]) + -1\n',
                                    'generateSetArrayCommand([],[],1)\n'],
                             loc('testing/GraphUtilitiesTest.py'): ['indexLi'\
        'st\n'],
                             loc('testing/MainTest.py'): ['c2 = self.joinTre'\
        'e.nodes[2]\n',
        'c1\n',
        'c2\n',
        'c0.neighbors\n',
        'c1.neighbors\n',
        'c2.neighbors\n',
        '[node.name for node in c0.nodes]\n',
        '[node.name for node in c1.nodes]\n',
        '[node.name for node in c2.nodes]\n',
        'neighbor \n',
        'neighbor\n',
        'currentCluster\n',
        'mu\n',
        'clusterAxis\n',
        'cliqueAxes\n',
        'clique\n',
        'self.nodes\n',
        'sepsetAxes\n',
        'sepsetAxis\n',
        'cliu\n',
        'clusterAxes\n',
        'take(self.CPT, varAndValsArray, axis=(0,1,2))\n',
        'take(self.CPT, varAndParentValsArray, axis=(0,1,2))\n',
        'values\n',
        'indec\n',
        'index\n',
        'cluster\n',
        'cluster.CPT.CPT\n',
        'cluster.CPT.CPT \n',
        'sepset.potential.CPT\n',
        'array(self.bnet.nodes)\n',
        'nonEvMask\n',
        'node.CPT.nDims\n',
        'take(self.CPT, [], axis=0)\n',
        'take(self.CPT)\n',
        'take(self.CPT, axis=0)\n',
        'take(self.CPT, : )\n',
        'take(self.CPT, [:,:])\n',
        "eval('self.CPT' + indexStr)\n",
        "v=eval('self.CPT' + indexStr)\n",
        'v\n',
        'indexStr\n',
        'varAndParentValsArray\n',
        'parents\n',
        'state[array([])]\n',
        'Nx[i].CPT\n',
        'i\n',
        'queryIndex\n',
        'Nx\n',
        'Nx[0].normalise()\n',
        'Nx[0].CPT\n',
        'self.CPT.sum()\n',
        'self.CPT.sum\n',
        'sum(self.CPT)\n',
        'self.CPT/sum(self.CPT)\n',
        'self.CPT\n',
        'self.CPT/self.CPT.sum()\n',
        'Q\n',
        'len(Q0\n',
        ')\n',
        'len(Q)\n',
        'valuesList\n',
        'sum(valuesList)\n',
        'len(valuesList)\n',
        'node.index\n',
        'node.name\n',
        'parents[0].name\n',
        'parents[0].index\n',
        'children[0].name\n',
        'children\n',
        'children[0].index\n',
        'childPsI\n',
        'state(childPsI)\n',
        'state[childPsI]\n',
        'parentsI\n',
        'state[parentsI]\n',
        'oldVal\n',
        'indices\n',
        'child.CPT.getValue(indices)\n',
        'value\n',
        'MBval\n',
        'state\n',
        'val\n',
        'flipped\n',
        'Q.normalise()\n',
        'axes\n',
        'node.clique.nodes.index(node)\n',
        'node.clique.CPT.getValue([value],axes=[node.clique.nodes.index(node'\
        ')])\n',
        'query\n',
        'w = query[0]\n',
        'w.name\n',
        'w.clique\n',
        'w.clique.CPT\n',
        'w.clique.CPT.CPT\n',
        'self.joinTree.nodes\n',
        'node.clique.CPT.getValue([0],axes=[node.clique.nodes.index(node)])\n',
        'node.clique.CPT.getValue([1],axes=[node.clique.nodes.index(node)])\n',
        'Q = engine.marginal([water.nodes[wetgrass]], 5000)[0]\n',
        'Q = engine.marginal([water.nodes[cloudy]], 5000)[0]\n',
        'Q.CPT\n']}
debug.err-values = {None: {},
                    loc('testing/MainTest.py'): {}}
debug.exceptions-ignored = {loc('General/SequenceGenerator.py'): {17: 1,
        19: 1}}
debug.run-args = {loc('Graph/GraphUtilities.py'): 'from GraphUtilities impor'\
        't *\ngenerateArrayIndex([2,2],[0,2],[1],[1])',
                  loc('testing/UtilitiesTest.py'): 'import UtilityTest\nUtil'\
        'ityTest.test()'}
debug.shell-history = {None: ["b = Node(index=2,name='2')\n",
                              "c = Node(index=3,name='3')\n",
                              'd = set([c,b,a])\n',
                              'd\n',
                              'for node in d:\n',
                              '\tprint node.name\n',
                              'set([1,2,3])\n',
                              'a=set([1,2,3])\n',
                              'list(a)\n',
                              'len(a)\n',
                              'a.subset([1,2,3,4])\n',
                              'a.issubset([1,2,3,4])\n',
                              'v = zeros(2)\n',
                              'v\n',
                              'isinstance(v,array)\n',
                              'isinstance(v,ArrayType)\n',
                              'isinstance([1],ArrayType)\n',
                              'from Utilities import *\n',
                              'seq = SequenceGenerator(array([2,2]))\n',
                              'for s in seq:\n',
                              '\tprint s\n',
                              'a = Node(index=1)\n',
                              'b = Node(index =2)\n',
                              'c = Node(index =3)\n',
                              'set([b,c,a])\n',
                              's=set([b,c,a])\n',
                              'for n in set:\n',
                              's=set([b,a,c])\n',
                              's=set([a,b,c])\n',
                              'a.index = 3\n',
                              'a.index = 4\n',
                              's=set(s)\n',
                              'for n in s:\n',
                              '\tprint n.index\n',
                              's.hash()\n',
                              'slice = [None]*3\n',
                              'sliced\n',
                              't = ones([2,3,4])\n',
                              't[slice]\n',
                              't[:,:,:]\n',
                              'take(t, slice)\n',
                              'for k in range(3)\n',
                              'slices = [None]*3\n',
                              'for k in range(3):\n',
                              '\tslices[k] = []\n',
                              '\tfor j in range(3):\n',
                              '\t\tslices[k].append(slice(None))\n',
                              'slice(None)\n',
                              'slice(1)\n',
                              'slice(None,None)\n',
                              'None\n',
                              '[None]\n',
                              't\n',
                              's=[1,slice(None),2,slice(None)]\n',
                              's=slice(0,2)\n',
                              'slice(0,2,3)\n',
                              'slice\n',
                              'a = zeros([2,3,4,5])\n',
                              's = [1,slice(None),2,slice(None)]\n',
                              's = slice(1,None,2,None)\n',
                              'a[slice(1)]\n',
                              'a[slice(1)]=1\n',
                              'a[slice(1)]=0\n',
                              's = [slice(1),slice(None),slice(2),slice(None'\
                              ')]\n',
                              'a[s]=0\n',
                              's = [slice(1,1),slice(None),slice(2,2),slice('\
                              'None)]\n',
                              's = [slice(1,2),slice(None),slice(2,3),slice('\
                              'None)]\n',
                              'a[s]=1\n',
                              's = array(s)\n',
                              's = obj.array(s)\n',
                              'b = range(5)\n',
                              'b\n',
                              'b[[2,4]]\n',
                              'from DiscreteDistribution import *\n',
                              'from Node import *\n',
                              'n1 = Node(index=1)\n',
                              'n1 = Node(1)\n',
                              'n2 = Node(2)\n',
                              'n3 = Node(3)\n',
                              'assert(1==0),"1 is not 0"\n',
                              'from numarray import *\n',
                              'a = array(range(10))\n',
                              's = set([2,3,4,5])\n',
                              'a[s] \n',
                              'a = ones([3,2,3,2])\n',
                              's1 = [slice(0,1), slice(None), slice(0,1), sl'\
                              'ice(None)]\n',
                              's1\n',
                              's2 = [slice(1,2), slice(None), slice(1,2), sl'\
                              'ice(None)]\n',
                              'a[s1] = 2\n',
                              'a[s2] = 3\n',
                              'a[0,:,0,:]\n',
                              'a[0,:,0,0]\n',
                              's = [s1,s2]\n',
                              'a[s1,s2]\n',
                              'import numarray.objects as obj\n',
                              's = obj.array([s1,s2])\n',
                              'a\n',
                              's = s1+s2\n',
                              's\n',
                              'a[s]\n']}
debug.var-col-widths = [0.40816326530612246,
                        0.59183673469387754]
edit.dont-ask-to-fix-inconsistent-indents = {loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '9VVVoFaUANzrTYqE5ZXaG9yyBb'\
        'DvP1Mb',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (0,
                            3),
                           (1,),
                           (1,
                            0),
                           (1,
                            0,
                            0),
                           (1,
                            0,
                            0,
                            0)],
        'selected-nodes': [(1,
                            0,
                            0,
                            3)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               None)],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [4],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      None),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 4,
                       'selection_start': 4}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      None),
                     ('debug-modules',
                      'wide',
                      1,
                      None),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 145,
                       'selection_start': 145}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': 0,
                       'replace-string': 'alltrue',
                       'scope': ['current-file-batch'],
                       'search-entry-expanded': 0,
                       'search-string': 'generateIndex',
                       'search-style': 'text',
                       'starting-directory': 'c:\\cygwin\\home\\elliot\\trun'\
        'k\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      None)],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('dist/lib/pbnt/Learning.py'),
        {'first-line': 0,
         'selection_end': 256,
         'selection_start': 256},
        1124389836.138),
        (loc('dist/lib/pbnt/Utilities/Utilities.py'),
         {'first-line': 72,
          'selection_end': 2186,
          'selection_start': 2186},
         1124389850.9660001),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 84,
          'selection_end': 3572,
          'selection_start': 3572},
         1124389907.7160001),
        (loc('dist/lib/pbnt/Node.py'),
         {'first-line': 86,
          'selection_end': 8047,
          'selection_start': 8047},
         1124389971.809),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 84,
          'selection_end': 3663,
          'selection_start': 3663},
         1124389991.8410001),
        (loc('dist/lib/pbnt/Node.py'),
         {'first-line': 86,
          'selection_end': 8047,
          'selection_start': 8047},
         1124390019.2780001),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 84,
          'selection_end': 3668,
          'selection_start': 3668},
         1124390020.6059999),
        (loc('dist/lib/pbnt/Learning.py'),
         {'first-line': 0,
          'selection_end': 256,
          'selection_start': 256},
         1124390039.622),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 87,
          'selection_end': 3713,
          'selection_start': 3713},
         1124390045.95),
        (loc('dist/lib/pbnt/DiscreteDistribution.py'),
         {'first-line': 14,
          'selection_end': 3809,
          'selection_start': 3809},
         1124390195.6530001),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 80,
          'selection_end': 3484,
          'selection_start': 3484},
         1124390206.388),
        (loc('dist/lib/pbnt/DiscreteDistribution.py'),
         {'first-line': 30,
          'selection_end': 3051,
          'selection_start': 3051},
         1124390369.763),
        (loc('dist/lib/pbnt/Graph.py'),
         {'first-line': 80,
          'selection_end': 3479,
          'selection_start': 3479},
         1124390417.4030001),
        [loc('unknown:<untitled> #1'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1124390464.0910001],
        (loc('dist/lib/pbnt/Distribution.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1124390640.622),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1124390725.9030001),
        (loc('dist/lib/pbnt/Distribution.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1124390735.6059999),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 268,
          'selection_end': 0,
          'selection_start': 0},
         1124391499.2309999),
        (loc('Old/Inference/MCMCEngine.py'),
         {'first-line': 0,
          'selection_end': 185,
          'selection_start': 185},
         1124391511.825),
        [loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 268,
          'selection_end': 0,
          'selection_start': 0},
         1124391525.1530001]],
        19),
        'current-loc': loc('dist/lib/pbnt/Inference.py'),
        'editor-states': {loc('dist/lib/pbnt/Distribution.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('dist/lib/pbnt/Graph.py'): {'first-line': 80,
        'selection_end': 3479,
        'selection_start': 3479},
                          loc('dist/lib/pbnt/Inference.py'): {'first-line': 156,
        'selection_end': 7158,
        'selection_start': 7158},
                          loc('dist/lib/pbnt/Learning.py'): {'first-line': 0,
        'selection_end': 256,
        'selection_start': 256},
                          loc('dist/lib/pbnt/Node.py'): {'first-line': 86,
        'selection_end': 8047,
        'selection_start': 8047},
                          loc('dist/lib/pbnt/Utilities/Utilities.py'): {'fir'\
        'st-line': 72,
        'selection_end': 2186,
        'selection_start': 2186},
                          loc('Old/Inference/MCMCEngine.py'): {'first-line': 0,
        'selection_end': 185,
        'selection_start': 185},
                          loc('testing/UnitTest.py'): {'first-line': 0,
        'selection_end': 27,
        'selection_start': 27}},
        'has-focus': True},
                               'open_files': [u'dist/lib/pbnt/Graph.py',
        u'dist/lib/pbnt/Learning.py',
        u'dist/lib/pbnt/Node.py',
        u'dist/lib/pbnt/Utilities/Utilities.py',
        u'testing/UnitTest.py',
        u'dist/lib/pbnt/Distribution.py',
        u'Old/Inference/MCMCEngine.py',
        u'dist/lib/pbnt/Inference.py']},
        'split_percents': {0: 0.5},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         1260,
                         974)}]}
guimgr.recent-documents = [loc('dist/lib/pbnt/Inference.py'),
                           loc('Old/Inference/MCMCEngine.py'),
                           loc('dist/lib/pbnt/Distribution.py')]
guimgr.visual-state = {loc('dist/lib/pbnt/InferenceEngine.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/pbnt/Learning.py'): {'first-line': 0,
        'selection_end': 1916,
        'selection_start': 1916},
                       loc('dist/lib/pbnt/Utilities/GraphUtilities.py'): {'f'\
        'irst-line': 0,
        'selection_end': 3080,
        'selection_start': 3080},
                       loc('dist/lib/pbnt/Utilities/Utilities.py'): {'first-'\
        'line': 108,
        'selection_end': 3733,
        'selection_start': 3733},
                       loc('Distributions/DiscreteDistribution.py'): {'first'\
        '-line': 0,
        'selection_end': 551,
        'selection_start': 551},
                       loc('Examples/ExampleModels.py'): {'first-line': 0,
        'selection_end': 219,
        'selection_start': 219},
                       loc('General/ArrayIndexGenerator.py'): {'first-line': 0,
        'selection_end': 680,
        'selection_start': 680},
                       loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 515,
        'selection_start': 515},
                       loc('General/utilities.py'): {'first-line': 0,
        'selection_end': 2618,
        'selection_start': 2618},
                       loc('Graph/BayesNode.py'): {'first-line': 0,
        'selection_end': 52,
        'selection_start': 52},
                       loc('Graph/Clique.py'): {'first-line': 38,
        'selection_end': 2577,
        'selection_start': 2577},
                       loc('Graph/Cluster.py'): {'first-line': 0,
        'selection_end': 20,
        'selection_start': 20},
                       loc('Graph/DAG.py'): {'first-line': 46,
        'selection_end': 2005,
        'selection_start': 2005},
                       loc('Graph/DirectedNode.py'): {'first-line': 9,
        'selection_end': 340,
        'selection_start': 340},
                       loc('Graph/Graph.py'): {'first-line': 103,
        'selection_end': 8205,
        'selection_start': 8205},
                       loc('Graph/GraphUtilities.py'): {'first-line': 0,
        'selection_end': 1444,
        'selection_start': 1444},
                       loc('Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 47,
        'selection_start': 47},
                       loc('Graph/JoinTree.py'): {'first-line': 61,
        'selection_end': 3527,
        'selection_start': 3527},
                       loc('Graph/MoralGraph.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 40},
                       loc('Graph/Node.py'): {'first-line': 0,
        'selection_end': 5442,
        'selection_start': 5442},
                       loc('Graph/Sepset.py'): {'first-line': 0,
        'selection_end': 93,
        'selection_start': 93},
                       loc('Graph/TriangleGraph.py'): {'first-line': 13,
        'selection_end': 742,
        'selection_start': 742},
                       loc('Heap/ClusterBinaryHeap.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Heap/PriorityQueue.py'): {'first-line': 0,
        'selection_end': 422,
        'selection_start': 422},
                       loc('Inference/EnumerationEngine.py'): {'first-line': 45,
        'selection_end': 1409,
        'selection_start': 1409},
                       loc('Inference/InferenceEngine.py'): {'first-line': 220,
        'selection_end': 8095,
        'selection_start': 8095},
                       loc('Inference/JunctionTreeEngine.py'): {'first-line': 152,
        'selection_end': 6053,
        'selection_start': 6053},
                       loc('Learning/LearnParamsEM.py'): {'first-line': 0,
        'selection_end': 2044,
        'selection_start': 48},
                       loc('Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 0},
                       loc('Network/BayesNet.py'): {'first-line': 0,
        'selection_end': 637,
        'selection_start': 637},
                       loc('Old/OldJTreeIdeas.py'): {'first-line': 186,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/BayesNetTest.py'): {'first-line': 0,
        'selection_end': 1742,
        'selection_start': 1742},
                       loc('testing/EnumerationTest.py'): {'first-line': 17,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/GraphUtilitiesTest.py'): {'first-line': 0,
        'selection_end': 98,
        'selection_start': 98},
                       loc('testing/JunctionTreeTest.py'): {'first-line': 88,
        'selection_end': 1852,
        'selection_start': 1852},
                       loc('testing/MainTest.py'): {'first-line': 6,
        'selection_end': 869,
        'selection_start': 869},
                       loc('testing/MCMCEngineTest.py'): {'first-line': 98,
        'selection_end': 1220,
        'selection_start': 1220},
                       loc('testing/RandomTests.py'): {'first-line': 0,
        'selection_end': 36,
        'selection_start': 36},
                       loc('testing/UtilitiesTest.py'): {'first-line': 20,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Inference/MCMCEngine.py'): {'first-line': 25,
        'selection_end': 1348,
        'selection_start': 1348},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/SequenceGeneratorTest.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Inference/JunctionTreeDBNEngine.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Learning/LearnParamsEM.py'): {'first-lin'\
        'e': 23,
        'selection_end': 2046,
        'selection_start': 2046},
                       loc('working/Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 246,
        'selection_start': 246},
                       loc('../../../../Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 124,
        'selection_end': 3159,
        'selection_start': 3159},
                       loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 974,
        'selection_end': 37503,
        'selection_start': 37503},
                       loc('unknown:<untitled> #2'): {'first-line': 0,
        'selection_end': 6,
        'selection_start': 6},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 22,
        'selection_start': 22},
                       loc('../../../../Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 171,
        'selection_end': 5573,
        'selection_start': 5573}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('Graph/GraphUtilities.py'): ('project',
        ['']),
                 loc('testing/GraphUtilitiesTest.py'): ('project',
        ['']),
                 loc('testing/JunctionTreeTest.py'): ('project',
        ['']),
                 loc('testing/RandomTests.py'): ('project',
        ['']),
                 loc('unknown:<untitled> #5'): ('project',
        ['']),
                 loc('testing/MainTest.py'): ('project',
        [''])}
search.replace-history = ['alltrue',
                          'Float64']
search.search-history = ['generateIndex',
                         'gne',
                         'Cluster',
                         'Cluser',
                         'mu',
                         'parentCluster',
                         'parent',
                         'zip',
                         'set',
                         'indexWeights',
                         'index',
                         'bool',
                         'ClusterNode',
                         'ClusterP',
                         'initCliquePotential',
                         'initPotential',
                         'iniCPotential',
                         'iniPotential',
                         'in',
                         'ClusterBinaryHea']
