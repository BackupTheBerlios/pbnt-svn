#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Old/General/ArrayIndexGenerator.py'),
                  loc('Old/Graph/InducedCluster.py'),
                  loc('Old/Heap/ClusterBinaryHeap.py'),
                  loc('Old/Inference/MCMCEngine.py'),
                  loc('Old/Learning/LearnParamsEM.py'),
                  loc('Old/Learning/UpdateParams.py'),
                  loc('Old/Network/BayesNet.py'),
                  loc('Old/OldJTreeIdeas.py'),
                  loc('dist/examples/ExampleModels.py'),
                  loc('dist/lib/pbnt/Distribution.py'),
                  loc('dist/lib/pbnt/Graph.py'),
                  loc('dist/lib/pbnt/Inference.py'),
                  loc('dist/lib/pbnt/Learning.py'),
                  loc('dist/lib/pbnt/Node.py'),
                  loc('dist/lib/pbnt/Utilities/GraphUtilities.py'),
                  loc('dist/lib/pbnt/Utilities/Utilities.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/GraphUtilitiesTest.py'),
                  loc('testing/JunctionTreeTest.py'),
                  loc('testing/MCMCEngineTest.py'),
                  loc('testing/MainTest.py'),
                  loc('testing/UtilitiesTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/network.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('testing/GraphUtilitiesTest.py'): {5: (0,
        None,
        1,
        0)},
                     loc('testing/MainTest.py'): {10: (0,
        None,
        1,
        0),
        12: (0,
             None,
             1,
             0),
        13: (0,
             None,
             1,
             0)},
                     loc('testing/MCMCEngineTest.py'): {113: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['a = "[1 : :]"\n',
                                    'tmp = zeros([3]) + -1\n',
                                    'generateSetArrayCommand([],[],1)\n',
                                    'repr("3")\n'],
                             loc('testing/GraphUtilitiesTest.py'): ['indexLi'\
        'st\n'],
                             loc('testing/MainTest.py'): ['childPsI\n',
        'state(childPsI)\n',
        'state[childPsI]\n',
        'parentsI\n',
        'state[parentsI]\n',
        'oldVal\n',
        'indices\n',
        'child.CPT.getValue(indices)\n',
        'value\n',
        'MBval\n',
        'state\n',
        'flipped\n',
        'Q.normalise()\n',
        'axes\n',
        'node.clique.nodes.index(node)\n',
        'node.clique.CPT.getValue([value],axes=[node.clique.nodes.index(node'\
        ')])\n',
        'query\n',
        'w = query[0]\n',
        'w.name\n',
        'w.clique\n',
        'w.clique.CPT\n',
        'w.clique.CPT.CPT\n',
        'self.joinTree.nodes\n',
        'node.clique.CPT.getValue([0],axes=[node.clique.nodes.index(node)])\n',
        'node.clique.CPT.getValue([1],axes=[node.clique.nodes.index(node)])\n',
        'Q = engine.marginal([water.nodes[wetgrass]], 5000)[0]\n',
        'Q = engine.marginal([water.nodes[cloudy]], 5000)[0]\n',
        'Q.CPT\n',
        'cNode\n',
        'cNode.name\n',
        'cNode.index\n',
        'cNode.numValues\n',
        'cNode.id\n',
        'self.childrenSet\n',
        'len(self.nodes\n',
        ')\n',
        'len(self.nodes)\n',
        'self.name\n',
        'self.nodes\n',
        '[node.name for node in self.nodes]\n',
        'copy.deepcopy(moral.nodes)\n',
        'moral.nodes\n',
        'cnodes = moral.nodes.copy()\n',
        'cnodes = copy(moral.nodes)\n',
        'cnodes = copy.copy(moral.nodes)\n',
        'cnodes\n',
        'cnodes[0].name = changed\n',
        'cnodes[0].name = "changed"\n',
        '[node.name for node in cnodes]\n',
        '[node.name for node in moral.nodes]\n',
        'c = moral.nodes[0]\n',
        'c1 = copy.copy(moral.nodes[0])\n',
        'c.\n',
        'c1.name = "new"\n',
        'c.name\n',
        'c1.name\n',
        'n= moral.deep_copy_nodes()\n',
        'node = moral.nodes[0]\n',
        'n = copy.copy(node)\n',
        'n\n',
        'n.index\n',
        'node.index\n',
        'node.numValues\n',
        'node.id = 1\n',
        'moral.nodes[0].id\n',
        'node.id\n',
        'moral.nodes[0].name\n',
        'node.id = 0\n',
        'node.dist.size()\n',
        'self.potential.table\n',
        'seq\n',
        'node.dist[seq]\n',
        'i\n',
        'val\n',
        'nodes\n',
        'node\n',
        '2 * node.dist[index]\n',
        'Q * node.dist[index]\n',
        'oQ = Q\n',
        'Q = node.dist[index]\n',
        'oW\n',
        'oQ\n',
        'node.dist\n',
        'node.dist.tavle\n',
        'zeros([2,2])\n',
        'shape(node.dist[index])\n',
        'dist.nDims\n',
        'Q = Q[0]\n',
        'Q.table\n',
        'self.evidence\n',
        'nonEvidence\n',
        'node.name\n',
        'Q\n',
        'node.dist.table\n',
        'cDistribution.table\n',
        'vals\n',
        'node.dist[index]\n',
        'index\n',
        'axis\n',
        'Q[0].table\n']}
debug.err-values = {None: {},
                    loc('testing/MainTest.py'): {}}
debug.exceptions-ignored = {loc('General/SequenceGenerator.py'): {17: 1,
        19: 1}}
debug.run-args = {loc('Graph/GraphUtilities.py'): 'from GraphUtilities impor'\
        't *\ngenerateArrayIndex([2,2],[0,2],[1],[1])',
                  loc('testing/UtilitiesTest.py'): 'import UtilityTest\nUtil'\
        'ityTest.test()'}
debug.shell-history = {None: ['s = set()\n',
                              's1 = set()\n',
                              's.issuperset(s1)\n',
                              'from Node import *\n',
                              'a = Node(1)\n',
                              'b = Node(2)\n',
                              'l= [a,b]\n',
                              'l.index(a)\n',
                              'c = Node(1)\n',
                              'c.id = 2\n',
                              'l.index(c)\n',
                              'enumerate(l)\n',
                              '\tprint "Node: ",node.index\n',
                              'for i, node in enumerate(l):\n',
                              '\tprint "Node: ",node.id\n',
                              'st = "hello"\n',
                              'st[1] = a\n',
                              'st[1] = "a"\n',
                              'node.index\n',
                              'range(1,4)\n',
                              'product(arange(1,3+1))\n',
                              'shape(zeros([2]))\n',
                              'shape(zeros(2))\n',
                              'a=shape(zeros(2))\n',
                              'len(a)\n',
                              'for i in a:\n',
                              '\tprint i\n',
                              'from numarray import *\n',
                              'a = ones([3,1,2])\n',
                              'a[1,0,1] = 2\n',
                              'a[2,0,1] = 3\n',
                              'a[2,0,0] = 4\n',
                              'a.setshape((3,2))\n',
                              'a[1,2]\n',
                              'a[1,1]\n',
                              'a[[slice(1,2,None),slice(1,2,None)]]\n',
                              'b=a[[slice(1,2,None),slice(1,2,None)]]\n',
                              'b.setshape(())\n',
                              'a[slice(1,2,None),slice(1,2,None)]\n',
                              'a[(slice(1,2,None),slice(1,2,None))]\n',
                              'c = ones([3,3,3])\n',
                              's = [slice(1,2,None)]*3\n',
                              's[1] = slice(None,None,None)\n',
                              's\n',
                              'shape(c[s])\n',
                              'c[s] =2\n',
                              'c[s][0]\n',
                              'c[s][0][0]\n',
                              'd = c[s]\n',
                              'dim = array(shape(d))\n',
                              'dim\n',
                              'newDim = dim[dim>1]\n',
                              'newDim\n',
                              'd.setshape(newDim)\n',
                              'd.iscontiguous\n',
                              'd.iscontiguous()\n',
                              'd[[0,slice(None,None,None),0]]\n',
                              'shape(d)\n',
                              'd[0,:,0]\n',
                              'd[[slice(0,1,None),slice(None,None,None),slic'\
                              'e(0,1,None)]]\n',
                              'd\n',
                              'e = d[0]\n',
                              'e\n',
                              'shape(e)\n',
                              'f = e[0]\n',
                              'f\n',
                              'shape(f)\n',
                              'a\n',
                              'a[0,:]\n',
                              'a[0,:,0]\n',
                              'c[0,:,0]\n',
                              'c[0,:,:]=6\n',
                              'c.flat[range(9)]\n',
                              'c[slice(0,9,None)]\n',
                              'c[slice(0,9,1)]\n',
                              'c[[slice(0,9,1)]]\n',
                              'c[[slice(0,1,1)]]\n',
                              'c[0,:,:]\n',
                              'c[[[slice(0,1)],[slice(0,1)],[slice(0,1)]]]\n',
                              'slice(slice(0,1),slice(0,1),slice(0,1))\n',
                              's=slice(slice(0,1),slice(0,1),slice(0,1))\n',
                              'c[s]\n',
                              'len(c)\n',
                              'slice(0,1).indices(len(c))\n',
                              'slice(0,1).indices(10)\n',
                              'slice(0,1).indices((3,3))\n',
                              'zeros(5)\n',
                              'string(5)\n',
                              'str(5)\n',
                              'a = "1,2,3,"\n',
                              'a[:-1]\n',
                              'eval("c[0,1,0]")\n',
                              'eval("c[0,1,:]")\n',
                              'eval("c[0,1,0]=6")\n',
                              'exec "c[0,1,0]=2"\n',
                              'c\n',
                              'c[0,1,0]\n',
                              'repr(c[0,1,0])\n',
                              'repr(2)\n',
                              'repr("2")\n']}
debug.var-col-widths = [0.40816326530612246,
                        0.59183673469387754]
edit.dont-ask-to-fix-inconsistent-indents = {loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '9VVVoFaUANzrTYqE5ZXaG9yyBb'\
        'DvP1Mb',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(1,),
                           (1,
                            0),
                           (1,
                            1),
                           (1,
                            1,
                            0),
                           (1,
                            1,
                            0,
                            0),
                           (2,),
                           (3,),
                           (3,
                            0)],
        'selected-nodes': [(1,
                            0,
                            0)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               None)],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [1],
        'notebook_display': 'normal',
        'notebook_percent': 0.36408566721581548,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 39,
                       'selection_start': 39}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 24,
                       'selection_end': 413,
                       'selection_start': 413}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      None),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 311,
                       'selection_end': 7939,
                       'selection_start': 7939}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'replace',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 1,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 44,
                       'replace-entry-expanded': 0,
                       'replace-string': 'Q',
                       'scope': ['current-file-batch'],
                       'search-entry-expanded': 0,
                       'search-string': 'dist',
                       'search-style': 'text',
                       'starting-directory': 'c:\\cygwin\\home\\elliot\\trun'\
        'k\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      None)],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('dist/lib/pbnt/Inference.py'),
        {'first-line': 81,
         'selection_end': 3639,
         'selection_start': 3639},
        1124563849.984),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 101,
          'selection_end': 4936,
          'selection_start': 4936},
         1124563856.812),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 106,
          'selection_end': 4951,
          'selection_start': 4951},
         1124563858.9059999),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 106,
          'selection_end': 4988,
          'selection_start': 4988},
         1124563859.937),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 106,
          'selection_end': 5027,
          'selection_start': 5027},
         1124563860.984),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 106,
          'selection_end': 5057,
          'selection_start': 5057},
         1124563861.562),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 111,
          'selection_end': 5176,
          'selection_start': 5176},
         1124563862.609),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 111,
          'selection_end': 5242,
          'selection_start': 5242},
         1124563868.8280001),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 81,
          'selection_end': 3639,
          'selection_start': 3639},
         1124563886.8280001),
        (loc('dist/lib/pbnt/Distribution.py'),
         {'first-line': 42,
          'selection_end': 1914,
          'selection_start': 1914},
         1124563888.9059999),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 50,
          'selection_end': 2375,
          'selection_start': 2375},
         1124563907.0150001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 186,
          'selection_start': 186},
         1124563919.625),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 6,
          'selection_end': 433,
          'selection_start': 433},
         1124563928.0309999),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 186,
          'selection_start': 186},
         1124563954.5),
        (loc('dist/lib/pbnt/Inference.py'),
         {'first-line': 44,
          'selection_end': 2055,
          'selection_start': 2055},
         1124563957.734),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 79,
          'selection_end': 2243,
          'selection_start': 2243},
         1124563971.0780001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 186,
          'selection_start': 186},
         1124564056.359),
        (loc('testing/EnumerationTest.py'),
         {'first-line': 15,
          'selection_end': 436,
          'selection_start': 436},
         1124564063.0929999),
        (loc('dist/lib/pbnt/Distribution.py'),
         {'first-line': 58,
          'selection_end': 3269,
          'selection_start': 3269},
         1124564068.375),
        [loc('testing/EnumerationTest.py'),
         {'first-line': 15,
          'selection_end': 436,
          'selection_start': 436},
         1124564076.0150001]],
        19),
        'current-loc': loc('testing/EnumerationTest.py'),
        'editor-states': {loc('dist/examples/ExampleModels.py'): {'first-lin'\
        'e': 34,
        'selection_end': 1054,
        'selection_start': 1054},
                          loc('dist/lib/pbnt/Distribution.py'): {'first-line': 58,
        'selection_end': 3269,
        'selection_start': 3269},
                          loc('dist/lib/pbnt/Graph.py'): {'first-line': 206,
        'selection_end': 10859,
        'selection_start': 10845},
                          loc('dist/lib/pbnt/Inference.py'): {'first-line': 44,
        'selection_end': 2055,
        'selection_start': 2055},
                          loc('dist/lib/pbnt/Node.py'): {'first-line': 120,
        'selection_end': 960,
        'selection_start': 960},
                          loc('testing/EnumerationTest.py'): {'first-line': 21,
        'selection_end': 883,
        'selection_start': 883},
                          loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 186,
        'selection_start': 186}},
        'has-focus': True},
                               'open_files': [u'dist/lib/pbnt/Graph.py',
        u'dist/lib/pbnt/Node.py',
        u'dist/examples/ExampleModels.py',
        u'dist/lib/pbnt/Inference.py',
        u'testing/MainTest.py',
        u'dist/lib/pbnt/Distribution.py',
        u'testing/EnumerationTest.py']},
        'split_percents': {0: 0.5},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (191,
                         48,
                         1014,
                         729)}]}
guimgr.recent-documents = [loc('testing/EnumerationTest.py'),
                           loc('dist/lib/pbnt/Distribution.py'),
                           loc('testing/MainTest.py'),
                           loc('dist/lib/pbnt/Inference.py'),
                           loc('dist/examples/ExampleModels.py'),
                           loc('dist/lib/pbnt/Node.py')]
guimgr.visual-state = {loc('dist/examples/ExampleModels.py'): {'first-line': 12,
        'selection_end': 1917,
        'selection_start': 1917},
                       loc('dist/lib/pbnt/InferenceEngine.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/pbnt/Learning.py'): {'first-line': 0,
        'selection_end': 32,
        'selection_start': 32},
                       loc('dist/lib/pbnt/Utilities/GraphUtilities.py'): {'f'\
        'irst-line': 101,
        'selection_end': 3900,
        'selection_start': 3900},
                       loc('dist/lib/pbnt/Utilities/Utilities.py'): {'first-'\
        'line': 80,
        'selection_end': 3056,
        'selection_start': 3056},
                       loc('Distributions/DiscreteDistribution.py'): {'first'\
        '-line': 0,
        'selection_end': 551,
        'selection_start': 551},
                       loc('Examples/ExampleModels.py'): {'first-line': 0,
        'selection_end': 219,
        'selection_start': 219},
                       loc('General/ArrayIndexGenerator.py'): {'first-line': 0,
        'selection_end': 680,
        'selection_start': 680},
                       loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 515,
        'selection_start': 515},
                       loc('General/utilities.py'): {'first-line': 0,
        'selection_end': 2618,
        'selection_start': 2618},
                       loc('Graph/BayesNode.py'): {'first-line': 0,
        'selection_end': 52,
        'selection_start': 52},
                       loc('Graph/Clique.py'): {'first-line': 38,
        'selection_end': 2577,
        'selection_start': 2577},
                       loc('Graph/Cluster.py'): {'first-line': 0,
        'selection_end': 20,
        'selection_start': 20},
                       loc('Graph/DAG.py'): {'first-line': 46,
        'selection_end': 2005,
        'selection_start': 2005},
                       loc('Graph/DirectedNode.py'): {'first-line': 9,
        'selection_end': 340,
        'selection_start': 340},
                       loc('Graph/Graph.py'): {'first-line': 103,
        'selection_end': 8205,
        'selection_start': 8205},
                       loc('Graph/GraphUtilities.py'): {'first-line': 0,
        'selection_end': 1444,
        'selection_start': 1444},
                       loc('Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 47,
        'selection_start': 47},
                       loc('Graph/JoinTree.py'): {'first-line': 61,
        'selection_end': 3527,
        'selection_start': 3527},
                       loc('Graph/MoralGraph.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 40},
                       loc('Graph/Node.py'): {'first-line': 0,
        'selection_end': 5442,
        'selection_start': 5442},
                       loc('Graph/Sepset.py'): {'first-line': 0,
        'selection_end': 93,
        'selection_start': 93},
                       loc('Graph/TriangleGraph.py'): {'first-line': 13,
        'selection_end': 742,
        'selection_start': 742},
                       loc('Heap/ClusterBinaryHeap.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Heap/PriorityQueue.py'): {'first-line': 0,
        'selection_end': 422,
        'selection_start': 422},
                       loc('Inference/EnumerationEngine.py'): {'first-line': 45,
        'selection_end': 1409,
        'selection_start': 1409},
                       loc('Inference/InferenceEngine.py'): {'first-line': 220,
        'selection_end': 8095,
        'selection_start': 8095},
                       loc('Inference/JunctionTreeEngine.py'): {'first-line': 152,
        'selection_end': 6053,
        'selection_start': 6053},
                       loc('Learning/LearnParamsEM.py'): {'first-line': 0,
        'selection_end': 2044,
        'selection_start': 48},
                       loc('Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 0},
                       loc('Network/BayesNet.py'): {'first-line': 0,
        'selection_end': 637,
        'selection_start': 637},
                       loc('Old/Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 898,
        'selection_start': 898},
                       loc('Old/Heap/ClusterBinaryHeap.py'): {'first-line': 12,
        'selection_end': 1506,
        'selection_start': 32},
                       loc('Old/Inference/MCMCEngine.py'): {'first-line': 0,
        'selection_end': 301,
        'selection_start': 301},
                       loc('testing/BayesNetTest.py'): {'first-line': 0,
        'selection_end': 45,
        'selection_start': 45},
                       loc('testing/GraphUtilitiesTest.py'): {'first-line': 0,
        'selection_end': 98,
        'selection_start': 98},
                       loc('testing/RandomTests.py'): {'first-line': 0,
        'selection_end': 36,
        'selection_start': 36},
                       loc('working/Inference/MCMCEngine.py'): {'first-line': 25,
        'selection_end': 1348,
        'selection_start': 1348},
                       loc('unknown:<untitled> #1'): {'first-line': 0,
        'selection_end': 22,
        'selection_start': 22},
                       loc('unknown:<untitled> #2'): {'first-line': 0,
        'selection_end': 6,
        'selection_start': 6},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 145,
        'selection_start': 145},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Old/OldJTreeIdeas.py'): {'first-line': 186,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/EnumerationTest.py'): {'first-line': 0,
        'selection_end': 106,
        'selection_start': 106},
                       loc('testing/JunctionTreeTest.py'): {'first-line': 40,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/MainTest.py'): {'first-line': 6,
        'selection_end': 869,
        'selection_start': 869},
                       loc('testing/MCMCEngineTest.py'): {'first-line': 0,
        'selection_end': 164,
        'selection_start': 164},
                       loc('testing/SequenceGeneratorTest.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/UnitTest.py'): {'first-line': 0,
        'selection_end': 27,
        'selection_start': 27},
                       loc('testing/UtilitiesTest.py'): {'first-line': 0,
        'selection_end': 49,
        'selection_start': 49},
                       loc('working/Inference/JunctionTreeDBNEngine.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Learning/LearnParamsEM.py'): {'first-lin'\
        'e': 23,
        'selection_end': 2046,
        'selection_start': 2046},
                       loc('working/Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 246,
        'selection_start': 246},
                       loc('../../../../Python24/Lib/copy.py'): {'first-line': 264,
        'selection_end': 8239,
        'selection_start': 8239},
                       loc('../../../../Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 618,
        'selection_end': 23730,
        'selection_start': 23730},
                       loc('../../../../Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 1185,
        'selection_end': 43379,
        'selection_start': 43379},
                       loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 974,
        'selection_end': 37503,
        'selection_start': 37503}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('Graph/GraphUtilities.py'): ('project',
        ['']),
                 loc('testing/EnumerationTest.py'): ('project',
        ['']),
                 loc('testing/GraphUtilitiesTest.py'): ('project',
        ['']),
                 loc('unknown:<untitled> #5'): ('project',
        ['']),
                 loc('testing/JunctionTreeTest.py'): ('project',
        ['']),
                 loc('testing/MainTest.py'): ('project',
        ['']),
                 loc('testing/RandomTests.py'): ('project',
        [''])}
search.replace-history = ['alltrue',
                          'Float64']
search.search-history = ['dist',
                         'Q.CPT',
                         'add_evidence',
                         'add_evide',
                         '.table',
                         'CPT',
                         '/',
                         'cluster',
                         'cliqueAxes',
                         '__deepcopy__',
                         '__deepcopy',
                         'generate_index',
                         'generate',
                         'seq',
                         'dist.dim',
                         'dist.dims',
                         'dist.',
                         'node.dist',
                         '[seq]',
                         '[seq']
