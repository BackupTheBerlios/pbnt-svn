#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Distributions/DiscreteDistribution.py'),
                  loc('Examples/ExampleModels.py'),
                  loc('General/SequenceGenerator.py'),
                  loc('General/utilities.py'),
                  loc('Graph/BayesNode.py'),
                  loc('Graph/Clique.py'),
                  loc('Graph/Cluster.py'),
                  loc('Graph/DAG.py'),
                  loc('Graph/DirectedNode.py'),
                  loc('Graph/Graph.py'),
                  loc('Graph/GraphUtilities.py'),
                  loc('Graph/JoinTree.py'),
                  loc('Graph/MoralGraph.py'),
                  loc('Graph/Node.py'),
                  loc('Graph/Sepset.py'),
                  loc('Graph/TriangleGraph.py'),
                  loc('Heap/ClusterBinaryHeap.py'),
                  loc('Heap/PriorityQueue.py'),
                  loc('Inference/EnumerationEngine.py'),
                  loc('Inference/InferenceEngine.py'),
                  loc('Inference/JunctionTreeEngine.py'),
                  loc('Network/BayesNet.py'),
                  loc('Old/OldJTreeIdeas.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/JunctionTreeTest.py'),
                  loc('testing/MainTest.py'),
                  loc('testing/SequenceGeneratorTest.py'),
                  loc('testing/UtilitiesTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/Inference/MCMCEngine.py'),
                  loc('working/Learning/UpdateParams.py'),
                  loc('working/network.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('Inference/EnumerationEngine.py'): {18: (0,
        None,
        1,
        0)},
                     loc('testing/EnumerationTest.py'): {20: (0,
        None,
        1,
        0),
        21: (0,
             None,
             1,
             0)},
                     loc('testing/JunctionTreeTest.py'): {24: (0,
        None,
        1,
        0),
        52: (0,
             None,
             1,
             0),
        67: (0,
             None,
             1,
             0)},
                     loc('testing/MainTest.py'): {10: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {loc('testing/MainTest.py'): ['a = Q.CPT[False]\n',
        'allclose(a,.1220\n',
        'allclose(a,.1220,atol=.001)\n',
        'allclose(a,.1220,atol=.00001)\n',
        'a = Q.CPT[True]\n',
        'allclose(a,.1220,atol=.0001)\n',
        'allclose(a,.8780,atol=.0001)\n',
        'unique(a,c)\n',
        'a\n',
        'state\n',
        'self.bnet.parentIndices(i)\n',
        'state[self.bnet.parentIndices(i)]\n',
        'statei]\n',
        'state[i]\n',
        'state[array([])]\n',
        'seqs[0]\n',
        'seqs[3]\n',
        'seqs[1]\n',
        'seqs[2]\n',
        'Q = engine.marginal(sprinkler)\n',
        'sprinklier\n',
        'sprinkler\n',
        'val\n',
        'self.enumerateAll()\n',
        'Q\n',
        'zip(node.neighbors, range(len( node.neighbors )))\n',
        'moralGraph.nodes[0]\n',
        'moralGraph.nodes[0].neighbors\n',
        'moralGraph.nodes[0].children\n',
        'moralGraph.nodes[0].parents\n',
        'len( self.nodes)\n',
        'self.nodes[0].neighbors\n',
        'self.parents\n',
        'self.children\n',
        'self.neighbors\n',
        'node.neighbors\n',
        'node.parents\n',
        'node.children\n',
        'edge[0]\n',
        'edge[1]\n',
        'node.neighbors[0].index\n',
        'self.nodes[node.neighbors[edge[0]].index]\n',
        'self.nodes[node.neighbors[edge[1]].index]\n',
        'node.neighbros[1].index\n',
        'node.neighbors[1].index\n',
        'node.neighbors[2].index\n',
        ' cluster.node.neighbors\n',
        'cluster.node.neighbors\n',
        'cluster.edges\n',
        'edge\n',
        'inducedCliques\n',
        'self.nodes\n',
        'no\n',
        'c\n',
        'clique\n',
        'self\n',
        'node\n',
        'other.nodes\n',
        'other\n',
        'values\n',
        'values[seq]\n',
        'take(values,seq)\n',
        'take(values,seq, axis=range(2))\n',
        'seq\n',
        'take(values, seq, axes )\n',
        'axesToIterateOver\n',
        'put(self.CPT, concatenatput( self.CPT, concatenate(( seq, indices )'\
        '), take( values, seq, axis=range(len( seq )) ), axis=concatenate(( '\
        'axesToIterateOver, axes )))\n',
        ')\n',
        'put( self.CPT, concatenate(( seq, indices )), take( values, seq, ax'\
        'is=range(len( seq )) ), axis=concatenate(( axesToIterateOver, axes '\
        ')))\n',
        'concatenate((seq,indices))\n',
        'take( values, seq, axis=range(len( seq )) )\n',
        'take(self.CPT, concatenate((seq,indices)), axis=concatenate((axesTo'\
        'IterateOver,axes)))\n',
        'take(self.CPT, concatenate((seq,indices)), axis=(1,2,0))\n',
        'concatenate((axesToIterateOver, axes))\n',
        'take(self.CPT, concatenate((seq,indices)), axis=[1,2,0])\n',
        'array(concatenate((axesToIterateOver, axes)), type=Integer)\n',
        'array(concatenate((axesToIterateOver, axes)), type=Int)\n',
        'take(self.CPT, concatenate((seq,indices)), axis=array(concatenate(('\
        'axesToIterateOver,axes)),type=Int))\n',
        'take(self.CPT, concatenate((seq,indices)), axis=array([1,2,0]))\n',
        'take(self.CPT, concatenate((seq,indices)), axis=array([1,2,0]).toli'\
        'st())\n',
        'self.value\n',
        'dimsToIterateOver\n',
        'len(array([1,2,3]))\n',
        'indices\n',
        'value\n',
        'node.clique.CPT.CPT\n',
        'self.CPT\n',
        'varAndParentValsArray\n',
        'axes\n',
        'take(self.CPT, 0, axis=1)\n',
        'take(self.CPT, 0, axis=[1])\n',
        'take(self.CPT, 0, axis=(1))\n',
        'self.nDIms\n',
        'self.nDims\n',
        'take(self.CPT, [0], axis=(1))\n',
        'Q.CPT\n']}
debug.exceptions-ignored = {loc('General/SequenceGenerator.py'): {17: 1}}
debug.run-args = {loc('testing/UtilitiesTest.py'): 'import UtilityTest\nUtil'\
        'ityTest.test()'}
debug.shell-history = {None: ['import PriorityQueue\n',
                              'a = PriorityQueue.PriorityQueue()\n',
                              'a.insert(4)\n',
                              'a.insert(0)\n',
                              'a.insert(2)\n',
                              'a.insert(1)\n',
                              '[x for x in a]\n',
                              'b = [1,2,3]\n',
                              'b.iter()\n',
                              'b.__iter__()\n',
                              'b.__iter__\n',
                              'b[0] = [4,5,6]\n',
                              'i = b[0]\n',
                              'del b[0]\n',
                              'i\n',
                              'd = []\n',
                              'd[0]\n',
                              'product([1,2,3])\n',
                              'multiply([1,2,3])\n',
                              'product( array([3]))\n',
                              'a = (1,2,3)\n',
                              'a[0]\n',
                              'for (i,j) in zip([1,2,3],[4,5,6],[7,8,9]):\n',
                              '\tprint (i,j)\n',
                              'for (i,j,k) in zip([1,2,3],[4,5,6],[7,8,9]):\n',
                              '\tprint (i,j,k)\n',
                              'a = [1,2,3,4]\n',
                              'a.append(0)\n',
                              'a.sort()\n',
                              'a.copy()\n',
                              'copy( a )\n',
                              'copy.copy(a)\n',
                              'a[0] = 10\n',
                              'b\n',
                              'from Node import *\n',
                              'a = Node()\n',
                              'a.visited = True\n',
                              'a.index = 10\n',
                              'a.addNeighbor( 0 )\n',
                              'a.addNeighbor( 1 )\n',
                              'a.addNeighbor( 3 )\n',
                              'a.addNeighbor( 2 )\n',
                              'b = copy.copy(a)\n',
                              'b.index = 5\n',
                              'b.index\n',
                              'a.index\n',
                              'b.visited = False\n',
                              'b.visited\n',
                              'a.visited\n',
                              'a.neighbots\n',
                              'b.removeNeighbor(3)\n',
                              'b = copy.deepcopy(a)\n',
                              'a.addNeighbor(3)\n',
                              'b.neighbors\n',
                              'from Graph import *\n',
                              'g = Graph([a,b])\n',
                              'g.nodes[0].addNeighbor(5)\n',
                              'gCopy = copy.deepcopy(g)\n',
                              'gCopy.nodes[0].addNeighbor(10)\n',
                              'g.nodes[0].neighbors\n',
                              'gCopy.nodes[0].neighbros\n',
                              'gCopy.nodes[0].neighbors\n',
                              'isinstance(a.neighbors, type.ListType)\n',
                              'isinstance(a.neighbors, types.ListType)\n',
                              'from CliqueNode import *\n',
                              'cA = CliqueNode(a)\n',
                              'cA.neighbors\n',
                              'a.neighbors\n',
                              'w = ones([4,4])\n',
                              'sum(w)\n',
                              'w.sum()\n',
                              'w.sum + 1\n',
                              'w.sum() + 1\n',
                              'Q = engine.marginal(sprinkler)\n',
                              'engine\n',
                              '(range(4))\n',
                              'tuple(range(4))\n',
                              'q = ones([4])\n',
                              'put(q,1,2,axis=0)\n',
                              'q\n',
                              'put(q,1,3,axis=[0])\n',
                              'l = [0,1,2,3,4,5]\n',
                              'from numarray import *\n',
                              'a = array([1,2,3,4])\n',
                              'a = array([0,1,0,1])\n',
                              'a[a==1]\n',
                              'a==1\n',
                              'a!=0\n',
                              'zip(a, a!=1)\n',
                              'a = ones([2,2,2])\n',
                              'a[:,1,1] = [5,6]\n',
                              'take(a, [1,1], axis=(1,2))\n',
                              'put(a, [1,1], [10,12], axis=(1,2))\n',
                              'a = swapaxes(a, 0,2)\n',
                              'put(a,[1,1],[10,12],axis=(1,0))\n',
                              'put(a,[1,1],[12,10],axis=(0,1))\n',
                              'a[1,1,] = [12,10]\n',
                              'a = swapaxes(a,2,0)\n',
                              'a[1,] *= 2\n',
                              'a\n']}
edit.dont-ask-to-fix-inconsistent-indents = {loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'Lm9hxFusXIfgAt4oURJH8vDaxt'\
        'PGupG4',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [1],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.15996074582924436,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (1,),
                           (2,),
                           (3,),
                           (4,),
                           (5,),
                           (6,),
                           (8,),
                           (9,),
                           (9,
                            0)],
        'selected-nodes': [(8,
                            2)],
        'top-node': (3,
                     3)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('testing/UtilitiesTest.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('testing/UtilitiesTest.py'),
                      'test')]},
        loc('unknown:<untitled> #1'): {'column-widths': [1.0],
                                       'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('General/utilities.py'): {'column-widths': [1.0],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('function def',
        loc('General/utilities.py'),
        'addToPriorityQueue')]},
        loc('unknown:<untitled> #2'): {'column-widths': [1.0],
                                       'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('Network/BayesNet.py'): {'column-widths': [1.0],
                                     'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('class def',
        loc('Network/BayesNet.py'),
        'BayesNet')]},
        loc('testing/JunctionTreeTest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('testing/JunctionTreeTest.py'),
                      'testMoral')]},
        loc('testing/MainTest.py'): {'column-widths': [1.0],
                                     'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('generic attribute',
        loc('testing/MainTest.py'),
        'Bsuccess')]},
        loc('working/Inference/JunctionTreeEngine.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('working/Inference/JunctionTreeEngine.py'),
                             'Clique')]],
        'top-node': [('class def',
                      loc('working/Inference/JunctionTreeEngine.py'),
                      'Clique')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [1],
        'notebook_display': 'normal',
        'notebook_percent': 0.28995057660626034,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 61,
                       'selection_start': 61}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 13,
                       'selection_end': 252,
                       'selection_start': 252}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 79,
                       'selection_end': 3573,
                       'selection_start': 3573}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': 0,
                       'replace-string': '',
                       'scope': ['current-file-batch'],
                       'search-entry-expanded': 0,
                       'search-string': '',
                       'search-style': 'text',
                       'starting-directory': 'C:\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      None)],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('Graph/JoinTree.py'),
        {'first-line': 40,
         'selection_end': 2522,
         'selection_start': 2522},
        1122610460.046),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 21,
          'selection_end': 1274,
          'selection_start': 1274},
         1122610471.937),
        (loc('Graph/JoinTree.py'),
         {'first-line': 40,
          'selection_end': 2528,
          'selection_start': 2528},
         1122610473.4530001),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 21,
          'selection_end': 1274,
          'selection_start': 1274},
         1122610480.984),
        (loc('Graph/JoinTree.py'),
         {'first-line': 40,
          'selection_end': 2588,
          'selection_start': 2588},
         1122610482.359),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 21,
          'selection_end': 1274,
          'selection_start': 1274},
         1122610546.187),
        (loc('Graph/JoinTree.py'),
         {'first-line': 40,
          'selection_end': 2588,
          'selection_start': 2588},
         1122610553.3280001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 45,
          'selection_start': 45},
         1122610556.1559999),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 46,
          'selection_end': 1156,
          'selection_start': 1156},
         1122610561.75),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 45,
          'selection_start': 45},
         1122610620.8900001),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 12,
          'selection_end': 453,
          'selection_start': 453},
         1122610621.9059999),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 45,
          'selection_start': 45},
         1122610628.25),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 12,
          'selection_end': 452,
          'selection_start': 452},
         1122610632.5150001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 45,
          'selection_start': 45},
         1122610657.0309999),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 28,
          'selection_end': 1294,
          'selection_start': 1294},
         1122610684.671),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 45,
          'selection_start': 45},
         1122610766.3429999),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 32,
          'selection_end': 452,
          'selection_start': 452},
         1122610770.9530001),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 40,
          'selection_end': 1156,
          'selection_start': 1156},
         1122610780.734),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 99,
          'selection_end': 3474,
          'selection_start': 3474},
         1122610798.4530001),
        [loc('testing/JunctionTreeTest.py'),
         {'first-line': 40,
          'selection_end': 1156,
          'selection_start': 1156},
         1122610926.2179999]],
        19),
        'current-loc': loc('testing/JunctionTreeTest.py'),
        'editor-states': {loc('Distributions/DiscreteDistribution.py'): {'fi'\
        'rst-line': 21,
        'selection_end': 1274,
        'selection_start': 1274},
                          loc('Graph/Clique.py'): {'first-line': 7,
        'selection_end': 1399,
        'selection_start': 1399},
                          loc('Graph/JoinTree.py'): {'first-line': 40,
        'selection_end': 2588,
        'selection_start': 2588},
                          loc('Graph/Sepset.py'): {'first-line': 28,
        'selection_end': 873,
        'selection_start': 873},
                          loc('Inference/InferenceEngine.py'): {'first-line': 0,
        'selection_end': 319,
        'selection_start': 319},
                          loc('Inference/JunctionTreeEngine.py'): {'first-li'\
        'ne': 99,
        'selection_end': 3474,
        'selection_start': 3474},
                          loc('testing/JunctionTreeTest.py'): {'first-line': 32,
        'selection_end': 1156,
        'selection_start': 1156},
                          loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 45,
        'selection_start': 45}},
        'has-focus': True},
                               'open_files': [u'Inference/InferenceEngine.py',
        u'Graph/Clique.py',
        u'Graph/Sepset.py',
        u'Distributions/DiscreteDistribution.py',
        u'Graph/JoinTree.py',
        u'testing/MainTest.py',
        u'Inference/JunctionTreeEngine.py',
        u'testing/JunctionTreeTest.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         1260,
                         974)}]}
guimgr.recent-documents = [loc('testing/JunctionTreeTest.py'),
                           loc('Inference/JunctionTreeEngine.py'),
                           loc('testing/MainTest.py'),
                           loc('Graph/JoinTree.py'),
                           loc('Distributions/DiscreteDistribution.py'),
                           loc('Graph/Sepset.py'),
                           loc('Graph/Clique.py'),
                           loc('Inference/InferenceEngine.py')]
guimgr.visual-state = {loc('unknown:<untitled> #8'): {'first-line': 0,
        'selection_end': 86,
        'selection_start': 86},
                       loc('unknown:<untitled> #9'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Graph/JoinTree.py'): {'first-line': 0,
        'selection_end': 326,
        'selection_start': 326},
                       loc('Heap/ClusterBinaryHeap.py'): {'first-line': 0,
        'selection_end': 520,
        'selection_start': 520},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 145,
        'selection_start': 145},
                       loc('unknown:<untitled> #5'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #6'): {'first-line': 0,
        'selection_end': 145,
        'selection_start': 145},
                       loc('unknown:<untitled> #7'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('Distributions/DiscreteDistribution.py'): {'first'\
        '-line': 0,
        'selection_end': 625,
        'selection_start': 625},
                       loc('Examples/ExampleModels.py'): {'first-line': 14,
        'selection_end': 485,
        'selection_start': 485},
                       loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 378,
        'selection_start': 378},
                       loc('General/utilities.py'): {'first-line': 29,
        'selection_end': 1277,
        'selection_start': 1277},
                       loc('Graph/BayesNode.py'): {'first-line': 0,
        'selection_end': 547,
        'selection_start': 547},
                       loc('Graph/Clique.py'): {'first-line': 0,
        'selection_end': 1082,
        'selection_start': 1082},
                       loc('Graph/CliqueNode.py'): {'first-line': 0,
        'selection_end': 169,
        'selection_start': 169},
                       loc('Graph/Cluster.py'): {'first-line': 0,
        'selection_end': 316,
        'selection_start': 316},
                       loc('Graph/DAG.py'): {'first-line': 7,
        'selection_end': 861,
        'selection_start': 861},
                       loc('Graph/DirectedNode.py'): {'first-line': 8,
        'selection_end': 641,
        'selection_start': 641},
                       loc('Graph/DNode.py'): {'first-line': 0,
        'selection_end': 38,
        'selection_start': 38},
                       loc('Graph/Graph.py'): {'first-line': 0,
        'selection_end': 637,
        'selection_start': 637},
                       loc('Graph/GraphUtilities.py'): {'first-line': 0,
        'selection_end': 276,
        'selection_start': 276},
                       loc('Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 1066,
        'selection_start': 1066},
                       loc('Graph/MoralGraph.py'): {'first-line': 0,
        'selection_end': 227,
        'selection_start': 227},
                       loc('Graph/Node.py'): {'first-line': 2,
        'selection_end': 539,
        'selection_start': 539},
                       loc('Graph/Sepset.py'): {'first-line': 0,
        'selection_end': 129,
        'selection_start': 129},
                       loc('Graph/TriangleGraph.py'): {'first-line': 0,
        'selection_end': 1365,
        'selection_start': 1365},
                       loc('Heap/BinaryHeap.py'): {'first-line': 0,
        'selection_end': 159,
        'selection_start': 159},
                       loc('Heap/ClusterPriorityQueue.py'): {'first-line': 0,
        'selection_end': 23,
        'selection_start': 23},
                       loc('Heap/PriorityQueue.py'): {'first-line': 0,
        'selection_end': 575,
        'selection_start': 575},
                       loc('Inference/EnumerationEngine.py'): {'first-line': 6,
        'selection_end': 455,
        'selection_start': 455},
                       loc('Inference/InferenceEngine.py'): {'first-line': 0,
        'selection_end': 195,
        'selection_start': 195},
                       loc('Network/BayesNet.py'): {'first-line': 0,
        'selection_end': 635,
        'selection_start': 635},
                       loc('Old/OldJTreeIdeas.py'): {'first-line': 0,
        'selection_end': 8654,
        'selection_start': 8654},
                       loc('testing/BayesNetTest.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/EnumerationTest.py'): {'first-line': 10,
        'selection_end': 428,
        'selection_start': 428},
                       loc('testing/JunctionTreeTest.py'): {'first-line': 21,
        'selection_end': 733,
        'selection_start': 733},
                       loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 45,
        'selection_start': 45},
                       loc('working/Inference/InferenceEngine.py'): {'first-'\
        'line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #10'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/SequenceGeneratorTest.py'): {'first-line': 0,
        'selection_end': 1059,
        'selection_start': 1059},
                       loc('testing/UtilitiesTest.py'): {'first-line': 50,
        'selection_end': 1611,
        'selection_start': 1611},
                       loc('working/Inference/JunctionTreeEngine.py'): {'fir'\
        'st-line': 25,
        'selection_end': 4047,
        'selection_start': 4047},
                       loc('../../../../Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 522,
        'selection_end': 19612,
        'selection_start': 19612},
                       loc('../../../../Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 1790,
        'selection_end': 64348,
        'selection_start': 64348},
                       loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 2113,
        'selection_end': 86798,
        'selection_start': 86798}}
proj.env-vars = {loc('testing/MainTest.py'): ('project',
        ['']),
                 loc('testing/UtilitiesTest.py'): ('project',
        [''])}
proj.pyexec = {loc('testing/UtilitiesTest.py'): ('default',
        '')}
proj.pypath = {loc('testing/UtilitiesTest.py'): ('default',
        '')}
