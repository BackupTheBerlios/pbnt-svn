#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Distributions/DiscreteDistribution.py'),
                  loc('Examples/ExampleModels.py'),
                  loc('General/utilities.py'),
                  loc('Graph/Graph.py'),
                  loc('Graph/GraphUtilities.py'),
                  loc('Graph/InducedCluster.py'),
                  loc('Graph/Node.py'),
                  loc('Heap/ClusterBinaryHeap.py'),
                  loc('Heap/PriorityQueue.py'),
                  loc('Inference/InferenceEngine.py'),
                  loc('Network/BayesNet.py'),
                  loc('Old/OldJTreeIdeas.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/GraphUtilitiesTest.py'),
                  loc('testing/JunctionTreeTest.py'),
                  loc('testing/MCMCEngineTest.py'),
                  loc('testing/MainTest.py'),
                  loc('testing/SequenceGeneratorTest.py'),
                  loc('testing/UtilitiesTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/Inference/MCMCEngine.py'),
                  loc('working/Learning/LearnParamsEM.py'),
                  loc('working/Learning/UpdateParams.py'),
                  loc('working/network.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('testing/GraphUtilitiesTest.py'): {5: (0,
        None,
        1,
        0)},
                     loc('testing/MCMCEngineTest.py'): {113: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['a = "[1 : :]"\n',
                                    'tmp = zeros([3]) + -1\n',
                                    'generateSetArrayCommand([],[],1)\n'],
                             loc('testing/GraphUtilitiesTest.py'): ['indexLi'\
        'st\n'],
                             loc('testing/MainTest.py'): ['c2 = self.joinTre'\
        'e.nodes[2]\n',
        'c1\n',
        'c2\n',
        'c0.neighbors\n',
        'c1.neighbors\n',
        'c2.neighbors\n',
        '[node.name for node in c0.nodes]\n',
        '[node.name for node in c1.nodes]\n',
        '[node.name for node in c2.nodes]\n',
        'neighbor \n',
        'neighbor\n',
        'currentCluster\n',
        'mu\n',
        'clusterAxis\n',
        'cliqueAxes\n',
        'clique\n',
        'self.nodes\n',
        'sepsetAxes\n',
        'sepsetAxis\n',
        'cliu\n',
        'clusterAxes\n',
        'take(self.CPT, varAndValsArray, axis=(0,1,2))\n',
        'take(self.CPT, varAndParentValsArray, axis=(0,1,2))\n',
        'values\n',
        'indec\n',
        'index\n',
        'cluster\n',
        'cluster.CPT.CPT\n',
        'cluster.CPT.CPT \n',
        'sepset.potential.CPT\n',
        'array(self.bnet.nodes)\n',
        'nonEvMask\n',
        'node.CPT.nDims\n',
        'take(self.CPT, [], axis=0)\n',
        'take(self.CPT)\n',
        'take(self.CPT, axis=0)\n',
        'take(self.CPT, : )\n',
        'take(self.CPT, [:,:])\n',
        "eval('self.CPT' + indexStr)\n",
        "v=eval('self.CPT' + indexStr)\n",
        'v\n',
        'indexStr\n',
        'varAndParentValsArray\n',
        'parents\n',
        'state[array([])]\n',
        'Nx[i].CPT\n',
        'i\n',
        'queryIndex\n',
        'Nx\n',
        'Nx[0].normalise()\n',
        'Nx[0].CPT\n',
        'self.CPT.sum()\n',
        'self.CPT.sum\n',
        'sum(self.CPT)\n',
        'self.CPT/sum(self.CPT)\n',
        'self.CPT\n',
        'self.CPT/self.CPT.sum()\n',
        'Q\n',
        'len(Q0\n',
        ')\n',
        'len(Q)\n',
        'valuesList\n',
        'sum(valuesList)\n',
        'len(valuesList)\n',
        'node.index\n',
        'node.name\n',
        'parents[0].name\n',
        'parents[0].index\n',
        'children[0].name\n',
        'children\n',
        'children[0].index\n',
        'childPsI\n',
        'state(childPsI)\n',
        'state[childPsI]\n',
        'parentsI\n',
        'state[parentsI]\n',
        'oldVal\n',
        'indices\n',
        'child.CPT.getValue(indices)\n',
        'value\n',
        'MBval\n',
        'state\n',
        'val\n',
        'flipped\n',
        'Q.normalise()\n',
        'axes\n',
        'node.clique.nodes.index(node)\n',
        'node.clique.CPT.getValue([value],axes=[node.clique.nodes.index(node'\
        ')])\n',
        'query\n',
        'w = query[0]\n',
        'w.name\n',
        'w.clique\n',
        'w.clique.CPT\n',
        'w.clique.CPT.CPT\n',
        'self.joinTree.nodes\n',
        'node.clique.CPT.getValue([0],axes=[node.clique.nodes.index(node)])\n',
        'node.clique.CPT.getValue([1],axes=[node.clique.nodes.index(node)])\n',
        'Q = engine.marginal([water.nodes[wetgrass]], 5000)[0]\n',
        'Q = engine.marginal([water.nodes[cloudy]], 5000)[0]\n',
        'Q.CPT\n']}
debug.err-values = {None: {},
                    loc('testing/MainTest.py'): {}}
debug.exceptions-ignored = {loc('General/SequenceGenerator.py'): {17: 1,
        19: 1}}
debug.run-args = {loc('Graph/GraphUtilities.py'): 'from GraphUtilities impor'\
        't *\ngenerateArrayIndex([2,2],[0,2],[1],[1])',
                  loc('testing/UtilitiesTest.py'): 'import UtilityTest\nUtil'\
        'ityTest.test()'}
debug.shell-history = {None: ['a = DiscreteDistribution(ones([2,2]),2)\n',
                              'b = DiscreteDistribution(ones([2,2]),2)\n',
                              'b=copy.deepcopy(a)\n',
                              'b.CPT[1,1]=4\n',
                              'b.CPT\n',
                              'a.CPT\n',
                              'a = ones([3,4])\n',
                              'a[:,1] = 2\n',
                              'a[:,2] = 3\n',
                              'a[:,3] = 4\n',
                              ':\n',
                              'for\n',
                              'for i in a:\n',
                              '\tprint a\n',
                              'i = a[:,1]\n',
                              '[1]\n',
                              'i[1]=3\n',
                              'i\n',
                              't = i[[1,2]]\n',
                              't\n',
                              'from numarray import\n',
                              'a = ones([2,3,4])\n',
                              'shape(a)[1]\n',
                              'concatenate((array([1,2,3]), 2))\n',
                              'import numarray.random_array\n',
                              'import numarray.random_array as ra\n',
                              'ra.randint(0,5)\n',
                              'generateSetArrayCommand([],[],1)\n',
                              'zeros([1]) + -1\n',
                              't = zeros([1]) + -1\n',
                              't[1:-1]\n',
                              't[-1]\n',
                              'generateSetArrayCommand([1,2],[2,1],3)\n',
                              'len([])\n',
                              'generateSetArrayCommand(array([]),array([]),2'\
                              ')\n',
                              'from GraphUtilities import *\n',
                              'generateSetArrayCommand([],[],2)\n',
                              "eval 'array([2,2,2])'\n",
                              "eval( 'array([2,2,2])')\n",
                              'from numarray.random_array import *\n',
                              'randint(array([0,0,0,0]),array([2,2,2,2]))\n',
                              'ev = zeros([4])\n',
                              'ev[1]=-1\n',
                              'ev[3]=-1\n',
                              'where(ev==-1)\n',
                              'where(ev==-1)[0]\n',
                              'ev == -1\n',
                              'ev\n',
                              'ev[:-1]\n',
                              'a = [2]\n',
                              'a[:-1]\n',
                              'l = [1,2,3]\n',
                              'array([l])\n',
                              'Q.CPT\n',
                              'from numarray import *\n',
                              'a = array([1,2,3])\n',
                              'a[[]] = 0\n',
                              'b = a[a==0]\n',
                              'a[b] = 0\n',
                              'a[concatenate((array([0]), array([1])))]\n',
                              'concatenate((array([0]), array([1])))\n',
                              'b=concatenate((array([0]), array([1])))\n',
                              'a = zeros([2,2])\n',
                              'a[0,1]=1\n',
                              'a[b]\n',
                              'a[3]\n',
                              'a.flat[3]\n',
                              'a.flat[3]=1\n',
                              'a = array(range(8), shape=(2,2,2))\n',
                              'a.flat\n',
                              'a[0,0,2]\n',
                              'a = array(range(27), shape=(3,3,3))\n',
                              'a[0,0,1]\n',
                              'a[0,1,1]\n',
                              'a[1,1,1]\n',
                              'a[2,1,1]\n',
                              'a[2,2,1]\n',
                              'b\n',
                              'b[2:]\n',
                              'product(b[2:])\n',
                              'assert(isinstance(b,types.array))\n',
                              'assert(0==1)\n',
                              'a\n',
                              'shape(a)\n',
                              'a.shape()\n',
                              'a.shape\n',
                              's = a.shape\n',
                              's[1]\n',
                              'isinstance(s, types.TupleType)\n',
                              'isinstance(s, ArrayType)\n',
                              'isinstance(s, types.ListType)\n',
                              's = list(s)\n',
                              's\n',
                              'product(s[1:])\n',
                              'product(s[3:])\n',
                              'a = [1]\n',
                              'b=[2]\n',
                              'c = [a,b]\n',
                              'for l in c:\n',
                              '\tprint l\n']}
debug.var-col-widths = [0.40816326530612246,
                        0.59183673469387754]
edit.dont-ask-to-fix-inconsistent-indents = {loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 't8Vsx8FxDdqrYvDETHxfvNU1LA'\
        'J4FCEJ',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (1,),
                           (2,),
                           (3,),
                           (4,),
                           (5,),
                           (6,),
                           (8,),
                           (9,),
                           (9,
                            0),
                           (9,
                            1)],
        'selected-nodes': [(9,
                            1,
                            1)],
        'top-node': (8,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('Distributions/DiscreteDistribution.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('Distributions/DiscreteDistribution.py'),
                      'DiscreteDistribution')]},
        loc('Examples/ExampleModels.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('Examples/ExampleModels.py'),
                      'umbrellaDBN')]},
        loc('General/SequenceGenerator.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('General/SequenceGenerator.py'),
                      'SequenceGenerator')]},
        loc('General/utilities.py'): {'column-widths': [1.0],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': [('class def',
        loc('General/utilities.py'),
        'SequenceGenerator')]},
        loc('Graph/BayesNode.py'): {'column-widths': [1.0],
                                    'expanded-nodes': [],
                                    'selected-nodes': [],
                                    'top-node': None},
        loc('Graph/Clique.py'): {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': None},
        loc('Graph/Cluster.py'): {'column-widths': [1.0],
                                  'expanded-nodes': [],
                                  'selected-nodes': [],
                                  'top-node': None},
        loc('Graph/DAG.py'): {'column-widths': [1.0],
                              'expanded-nodes': [],
                              'selected-nodes': [],
                              'top-node': None},
        loc('Graph/DirectedNode.py'): {'column-widths': [1.0],
                                       'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('Graph/Graph.py'): {'column-widths': [1.0],
                                'expanded-nodes': [],
                                'selected-nodes': [],
                                'top-node': [('class def',
        loc('Graph/Graph.py'),
        'DAG')]},
        loc('Graph/GraphUtilities.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [[('function def',
                             loc('Graph/GraphUtilities.py'),
                             'addClique')]],
        'top-node': [('function def',
                      loc('Graph/GraphUtilities.py'),
                      'addClique')]},
        loc('Graph/InducedCluster.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('Graph/InducedCluster.py'),
                      'InducedCluster')]},
        loc('Graph/JoinTree.py'): {'column-widths': [1.0],
                                   'expanded-nodes': [],
                                   'selected-nodes': [],
                                   'top-node': None},
        loc('Graph/MoralGraph.py'): {'column-widths': [1.0],
                                     'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': None},
        loc('Graph/Node.py'): {'column-widths': [1.0],
                               'expanded-nodes': [],
                               'selected-nodes': [],
                               'top-node': [('class def',
        loc('Graph/Node.py'),
        'BayesNode')]},
        loc('Graph/Sepset.py'): {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': None},
        loc('Graph/TriangleGraph.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('Heap/ClusterBinaryHeap.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('Heap/ClusterBinaryHeap.py'),
                      'ClusterBinaryHeap')]},
        loc('Inference/EnumerationEngine.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('Inference/InferenceEngine.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('Inference/InferenceEngine.py'),
                      'EnumerationEngine')]},
        loc('Inference/JunctionTreeEngine.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('Network/BayesNet.py'): {'column-widths': [1.0],
                                     'expanded-nodes': [],
                                     'selected-nodes': [],
                                     'top-node': [('class def',
        loc('Network/BayesNet.py'),
        'BayesNet')]},
        loc('working/Inference/JunctionTreeDBNEngine.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('working/Learning/LearnParamsEM.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('working/Learning/LearnParamsEM.py'),
                      'learnParamsEM')]},
        loc('working/Learning/UpdateParams.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('working/Learning/UpdateParams.py'),
                      'updateParams')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [5],
        'notebook_display': 'normal',
        'notebook_percent': 0.065897858319604596,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 0,
                       'selection_start': 0}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 33,
                       'selection_end': 1283,
                       'selection_start': 1283}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      None),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 223,
                       'selection_start': 223}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'replace',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': False,
                       'replace-string': 'alltrue',
                       'scope': ['project-files',
                                 None],
                       'search-entry-expanded': False,
                       'search-string': '',
                       'search-style': 'text',
                       'starting-directory': 'c:\\cygwin\\home\\elliot\\trun'\
        'k\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      None)],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('Examples/ExampleModels.py'),
        {'first-line': 0,
         'selection_end': 219,
         'selection_start': 219},
        1123901037.359),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 0,
          'selection_end': 135,
          'selection_start': 135},
         1123901044.296),
        (loc('General/utilities.py'),
         {'first-line': 0,
          'selection_end': 3005,
          'selection_start': 3005},
         1123901047.5780001),
        (loc('Graph/GraphUtilities.py'),
         {'first-line': 0,
          'selection_end': 1624,
          'selection_start': 1624},
         1123901057.546),
        (loc('Graph/InducedCluster.py'),
         {'first-line': 0,
          'selection_end': 47,
          'selection_start': 47},
         1123901067.984),
        (loc('Graph/GraphUtilities.py'),
         {'first-line': 0,
          'selection_end': 1624,
          'selection_start': 1624},
         1123901078.296),
        (loc('General/utilities.py'),
         {'first-line': 0,
          'selection_end': 3005,
          'selection_start': 3005},
         1123901079.1400001),
        (loc('Graph/Node.py'),
         {'first-line': 0,
          'selection_end': 4633,
          'selection_start': 4633},
         1123901080.9530001),
        (loc('Network/BayesNet.py'),
         {'first-line': 13,
          'selection_end': 637,
          'selection_start': 637},
         1123901101.2650001),
        (loc('Graph/Graph.py'),
         {'first-line': 62,
          'selection_end': 2397,
          'selection_start': 2397},
         1123901116.7809999),
        (loc('Network/BayesNet.py'),
         {'first-line': 10,
          'selection_end': 637,
          'selection_start': 637},
         1123901134.3900001),
        (loc('Learning/LearnParamsEM.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1123903067.8429999),
        (loc('Learning/UpdateParams.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1123903068.109),
        (loc('unknown:untitled-1.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1123903072.0309999),
        (loc('Learning/UpdateParams.py'),
         {'first-line': 0,
          'selection_end': 250,
          'selection_start': 46},
         1123903095.984),
        (loc('unknown:untitled-1.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1123903102.687),
        (loc('Learning/UpdateParams.py'),
         {'first-line': 0,
          'selection_end': 40,
          'selection_start': 0},
         1123903108.984),
        (loc('unknown:untitled-1.py'),
         {'first-line': 0,
          'selection_end': 40,
          'selection_start': 40},
         1123903111.7809999),
        (loc('Learning/LearnParamsEM.py'),
         {'first-line': 12,
          'selection_end': 2044,
          'selection_start': 48},
         1123903116.5),
        [loc('unknown:untitled-1.py'),
         {'first-line': 0,
          'selection_end': 40,
          'selection_start': 40},
         1123903125.5780001]],
        19),
        'current-loc': loc('dist/lib/pbnt/Learning.py'),
        'editor-states': {loc('dist/lib/pbnt/Learning.py'): {'first-line': 0,
        'selection_end': 1916,
        'selection_start': 1916},
                          loc('Examples/ExampleModels.py'): {'first-line': 0,
        'selection_end': 219,
        'selection_start': 219},
                          loc('Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 47,
        'selection_start': 47},
                          loc('Learning/LearnParamsEM.py'): {'first-line': 12,
        'selection_end': 2044,
        'selection_start': 48},
                          loc('Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 0},
                          loc('Network/BayesNet.py'): {'first-line': 10,
        'selection_end': 637,
        'selection_start': 637}},
        'has-focus': False},
                               'open_files': [u'Examples/ExampleModels.py',
        u'Graph/InducedCluster.py',
        u'Network/BayesNet.py',
        u'Learning/UpdateParams.py',
        u'Learning/LearnParamsEM.py',
        u'dist/lib/pbnt/Learning.py']},
        'split_percents': {0: 0.5},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.56013179571663918},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         1260,
                         974)}]}
guimgr.recent-documents = [loc('unknown:untitled-1.py'),
                           loc('Learning/LearnParamsEM.py'),
                           loc('Learning/UpdateParams.py'),
                           loc('Network/BayesNet.py')]
guimgr.visual-state = {loc('Distributions/DiscreteDistribution.py'): {'first'\
        '-line': 0,
        'selection_end': 551,
        'selection_start': 551},
                       loc('Examples/ExampleModels.py'): {'first-line': 0,
        'selection_end': 1753,
        'selection_start': 1753},
                       loc('General/ArrayIndexGenerator.py'): {'first-line': 0,
        'selection_end': 680,
        'selection_start': 680},
                       loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 515,
        'selection_start': 515},
                       loc('General/utilities.py'): {'first-line': 0,
        'selection_end': 2618,
        'selection_start': 2618},
                       loc('Graph/BayesNode.py'): {'first-line': 0,
        'selection_end': 52,
        'selection_start': 52},
                       loc('Graph/Clique.py'): {'first-line': 38,
        'selection_end': 2577,
        'selection_start': 2577},
                       loc('Graph/Cluster.py'): {'first-line': 0,
        'selection_end': 20,
        'selection_start': 20},
                       loc('Graph/DAG.py'): {'first-line': 46,
        'selection_end': 2005,
        'selection_start': 2005},
                       loc('Graph/DirectedNode.py'): {'first-line': 9,
        'selection_end': 340,
        'selection_start': 340},
                       loc('Graph/Graph.py'): {'first-line': 103,
        'selection_end': 8205,
        'selection_start': 8205},
                       loc('Graph/GraphUtilities.py'): {'first-line': 0,
        'selection_end': 1444,
        'selection_start': 1444},
                       loc('Graph/InducedCluster.py'): {'first-line': 0,
        'selection_end': 47,
        'selection_start': 47},
                       loc('Graph/JoinTree.py'): {'first-line': 61,
        'selection_end': 3527,
        'selection_start': 3527},
                       loc('Graph/MoralGraph.py'): {'first-line': 0,
        'selection_end': 40,
        'selection_start': 40},
                       loc('Graph/Node.py'): {'first-line': 0,
        'selection_end': 5442,
        'selection_start': 5442},
                       loc('Graph/Sepset.py'): {'first-line': 0,
        'selection_end': 93,
        'selection_start': 93},
                       loc('Graph/TriangleGraph.py'): {'first-line': 13,
        'selection_end': 742,
        'selection_start': 742},
                       loc('Heap/ClusterBinaryHeap.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Heap/PriorityQueue.py'): {'first-line': 0,
        'selection_end': 422,
        'selection_start': 422},
                       loc('Inference/EnumerationEngine.py'): {'first-line': 45,
        'selection_end': 1409,
        'selection_start': 1409},
                       loc('Inference/InferenceEngine.py'): {'first-line': 220,
        'selection_end': 8095,
        'selection_start': 8095},
                       loc('Inference/JunctionTreeEngine.py'): {'first-line': 152,
        'selection_end': 6053,
        'selection_start': 6053},
                       loc('Network/BayesNet.py'): {'first-line': 24,
        'selection_end': 793,
        'selection_start': 793},
                       loc('Old/OldJTreeIdeas.py'): {'first-line': 186,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/BayesNetTest.py'): {'first-line': 0,
        'selection_end': 1742,
        'selection_start': 1742},
                       loc('testing/EnumerationTest.py'): {'first-line': 17,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/GraphUtilitiesTest.py'): {'first-line': 0,
        'selection_end': 98,
        'selection_start': 98},
                       loc('testing/MainTest.py'): {'first-line': 6,
        'selection_end': 869,
        'selection_start': 869},
                       loc('testing/RandomTests.py'): {'first-line': 0,
        'selection_end': 36,
        'selection_start': 36},
                       loc('working/Inference/MCMCEngine.py'): {'first-line': 25,
        'selection_end': 1348,
        'selection_start': 1348},
                       loc('unknown:<untitled> #2'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 6,
        'selection_start': 6},
                       loc('testing/JunctionTreeTest.py'): {'first-line': 88,
        'selection_end': 1852,
        'selection_start': 1852},
                       loc('testing/MCMCEngineTest.py'): {'first-line': 98,
        'selection_end': 1220,
        'selection_start': 1220},
                       loc('testing/SequenceGeneratorTest.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/UtilitiesTest.py'): {'first-line': 20,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Inference/JunctionTreeDBNEngine.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('working/Learning/LearnParamsEM.py'): {'first-lin'\
        'e': 23,
        'selection_end': 2046,
        'selection_start': 2046},
                       loc('working/Learning/UpdateParams.py'): {'first-line': 0,
        'selection_end': 246,
        'selection_start': 246},
                       loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 974,
        'selection_end': 37503,
        'selection_start': 37503},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 22,
        'selection_start': 22},
                       loc('../../../../Python24/Lib/site-packages/numarray/generic.py'): {''\
        'first-line': 171,
        'selection_end': 5573,
        'selection_start': 5573},
                       loc('../../../../Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 124,
        'selection_end': 3159,
        'selection_start': 3159}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('Graph/GraphUtilities.py'): ('project',
        ['']),
                 loc('testing/GraphUtilitiesTest.py'): ('project',
        ['']),
                 loc('testing/JunctionTreeTest.py'): ('project',
        ['']),
                 loc('testing/RandomTests.py'): ('project',
        ['']),
                 loc('unknown:<untitled> #5'): ('project',
        ['']),
                 loc('testing/MainTest.py'): ('project',
        [''])}
search.replace-history = ['alltrue',
                          'Float64']
search.search-history = ['ClusterBinaryHea',
                         'ClusterBinaryHeap',
                         'ClusterBinaryh',
                         'ClusterBinary',
                         'Cluster',
                         'Cluser',
                         'def MoralGraph',
                         'def Moral ',
                         'def Moral',
                         'Mor',
                         'isin',
                         'isisn',
                         'Float',
                         'generateSetArrayCommand',
                         'ge',
                         'setValue',
                         'numarray',
                         'Numeric',
                         'getValue',
                         'all']
