#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('Distributions/DiscreteDistribution.py'),
                  loc('Examples/ExampleModels.py'),
                  loc('General/SequenceGenerator.py'),
                  loc('General/utilities.py'),
                  loc('Graph/BayesNode.py'),
                  loc('Graph/Clique.py'),
                  loc('Graph/Cluster.py'),
                  loc('Graph/DAG.py'),
                  loc('Graph/DirectedNode.py'),
                  loc('Graph/Graph.py'),
                  loc('Graph/GraphUtilities.py'),
                  loc('Graph/JoinTree.py'),
                  loc('Graph/MoralGraph.py'),
                  loc('Graph/Node.py'),
                  loc('Graph/Sepset.py'),
                  loc('Graph/TriangleGraph.py'),
                  loc('Heap/ClusterBinaryHeap.py'),
                  loc('Heap/PriorityQueue.py'),
                  loc('Inference/EnumerationEngine.py'),
                  loc('Inference/InferenceEngine.py'),
                  loc('Inference/JunctionTreeEngine.py'),
                  loc('Network/BayesNet.py'),
                  loc('Old/OldJTreeIdeas.py'),
                  loc('testing/BayesNetTest.py'),
                  loc('testing/EnumerationTest.py'),
                  loc('testing/GraphUtilitiesTest.py'),
                  loc('testing/JunctionTreeTest.py'),
                  loc('testing/MainTest.py'),
                  loc('testing/SequenceGeneratorTest.py'),
                  loc('testing/UtilitiesTest.py'),
                  loc('working/Factor.py'),
                  loc('working/Inference/EliminationEngine.py'),
                  loc('working/Inference/MCMCEngine.py'),
                  loc('working/Learning/UpdateParams.py'),
                  loc('working/network.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('testing/EnumerationTest.py'): {20: (0,
        None,
        1,
        0),
        21: (0,
             None,
             1,
             0)},
                     loc('testing/GraphUtilitiesTest.py'): {5: (0,
        None,
        1,
        0)},
                     loc('testing/JunctionTreeTest.py'): {22: (0,
        None,
        1,
        0),
        24: (0,
             None,
             1,
             0),
        28: (0,
             None,
             1,
             0),
        47: (0,
             None,
             1,
             0),
        56: (0,
             None,
             1,
             0),
        71: (0,
             None,
             1,
             0)},
                     loc('testing/MainTest.py'): {10: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {loc('testing/GraphUtilitiesTest.py'): ['indexLi'\
        'st\n'],
                             loc('testing/MainTest.py'): ['array(clique.CPT.'\
        'dims)\n',
        'array([value])\n',
        'axis\n',
        'a = array([values])\n',
        'a\n',
        'a[seq]\n',
        'mu\n',
        'mu.start\n',
        'mu.value\n',
        'newValues\n',
        'axesToIterateOver\n',
        'dimsToIterateOver\n',
        'range(len( seq ))\n',
        'potentialMask\n',
        '  Q = engine.marginal(wetgrass)\n',
        'Q = engine.marginal(3)\n',
        'Q = engine.marginal(sprinkler)\n',
        'Q = engine.marginal(cloudy)\n',
        'Q = engine.marginal(rain)\n',
        'Q = engine.marginal(wetgrass)\n',
        'Q = engine.maginal([water.nodes[wetgrass]])[0]\n',
        'Q = engine.maginal([water.nodes[cloudy]])[0]\n',
        'Q = engine.maginal([water.nodes[rain]])[0]\n',
        'moralGraph\n',
        'moralGraph.nodes\n',
        '[node.name for node in moralGraph.nodes]\n',
        'neigh = [node.neighbors for node in moralGraph.nodes]\n',
        'neigh\n',
        'neighNames = [node.name for node in l for l in neigh]\n',
        'len(neigh)\n',
        'cloudyNeighbors = [node.name for node in neigh[0]]\n',
        'cloudyNeighbors\n',
        'sprinklerNeighbors = [node.name for node in neigh[1]]\n',
        'rainNeighbors = [node.name for node in neigh[2]]\n',
        'wetgrassNeighbors = [node.name for node in neigh[3]]\n',
        'sprinklerNeighbors\n',
        'rainNeighbors\n',
        'wetgrassNeighbors\n',
        'heap.heap\n',
        'Q = engine.maginal([water.nodes[sprinkler]])[0]\n',
        'clusterAxes\n',
        'Q = engine.marginal([water.nodes[wetgrass]])[0]\n',
        'wetgrass\n',
        'water.nodes[wetgrass]\n',
        'Q = engine.marginal([water.nodes[3]])\n',
        'len(water.nodes[wetgrass])\n',
        '[water.nodes[wetgrass]]\n',
        'len([water.nodes[wetgrass]])\n',
        'n = [water.nodes[wetgrass]]\n',
        'n\n',
        'Q = engine.marginal(n)\n',
        'Q = engine.marginal([water.nodes[cloudy]])\n',
        'Q = Q[0]\n',
        'Q = engine.marginal([water.nodes[rain]])[0]\n',
        'Q.CPT\n',
        'cliques\n',
        'triangulatedGraph.nodes\n',
        'clique\n',
        '[node.name for node in sepset.nodes]\n',
        'self.nodes\n',
        'cliqueAxes\n',
        'clique.potential.CPT[:,1,:,:]\n',
        'clique.CPT.CPT[:,1,:,:]\n',
        'clique.CPT.CPT[:,0,:,:]\n',
        'clique.CPT.CPT\n',
        'pritn clique.CPT.CPT\n',
        'print clique.CPT.CPT\n',
        ' self.CPT.CPT\n',
        'seq[:,0,:,:]\n',
        'indices\n',
        'value\n',
        'values\n',
        'self.CPT[:,0,:,:]\n',
        'axes\n',
        'tuple(axes)\n',
        'self.CPT\n',
        'put(self.CPT,indices,value,axis=(0,1,2,3)\n',
        ')\n',
        'self.CPT.iscontiguous\n',
        'self.CPT.iscontiguous()\n',
        'indices.iscontiguous()\n',
        'value.iscontiguous()\n',
        'put(self.CPT,array(indices),value,axis=(0,1,2,3))\n',
        'a = ones([2,2,2,2])\n',
        'put(a, indices, value, axis=(0,1,2,3))\n',
        'scattered\n',
        'indexArrays\n',
        'gathered\n',
        'gathered.iscontiguous()\n',
        '[node.name for node in clique.nodes]\n',
        'v.name\n',
        'seq\n',
        'self.CPT.CPT\n',
        'self.CPT.CPT[:,0,:,:]\n',
        'self.CPT.CPT[:,1,:,:]\n',
        'axesToIter\n',
        '[node.name for node in self.nodes]\n',
        'variable.name\n',
        'index\n',
        'cluster.CPT.dims\n']}
debug.err-values = {None: {},
                    loc('testing/MainTest.py'): {}}
debug.exceptions-ignored = {loc('General/SequenceGenerator.py'): {17: 1,
        19: True}}
debug.run-args = {loc('Graph/GraphUtilities.py'): 'from GraphUtilities impor'\
        't *\ngenerateArrayIndex([2,2],[0,2],[1],[1])',
                  loc('testing/UtilitiesTest.py'): 'import UtilityTest\nUtil'\
        'ityTest.test()'}
debug.shell-history = {None: ['put(a,[1,1],[10,12],axis=(1,0))\n',
                              'put(a,[1,1],[12,10],axis=(0,1))\n',
                              'a[1,1,] = [12,10]\n',
                              'a = swapaxes(a,2,0)\n',
                              'a[1,] *= 2\n',
                              'a[:,1,1] = 2\n',
                              'put(a, [1,1], 5, axis=(1,2))\n',
                              'take(a,array([1]),array([1]),array([1]),axis='\
                              '(0,1,2))\n',
                              'take(a,[array([1]),array([1]),array([1])],axi'\
                              's=(0,1,2))\n',
                              'take(a,[array([0,1]),array([1,1]),array([1,1]'\
                              ')],axis=(0,1,2))\n',
                              'put(a,[array([0,1]),array([1,1]),array([1,1])'\
                              '],array([5,6]),axis=(0,1,2))\n',
                              'take(a,[array([0,1]),array([1,1]),array([0,1]'\
                              ')],axis=(0,1,2))\n',
                              'take(a,[array([0,0,1,1]),array([1,1]),array(['\
                              '0,1,0,1])],axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([0,1,0,1])],[10,12],axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([0,1,0,1])],[2,10,2,12],axis=(0,1,2))\n',
                              'a[:,1,:]\n',
                              'put(a,[array([1,1,1,1]),array([0,0,1,1]),arra'\
                              'y([0,1,0,1])],[2,10,2,12],axis=(1,0,2))\n',
                              'put(a,[array([1,1,1,1]),array([0,0,1,1]),arra'\
                              'y([0,1,0,1])],[3,11,3,13],axis=(1,0,2))\n',
                              'put(a,array([array([1,1,1,1]),array([0,0,1,1]'\
                              '),array([0,1,0,1])]),[3,11,3,13],axis=(1,0,2)'\
                              ')\n',
                              'c = array([ones([4]),ones([4]),ones([4]),ones'\
                              '([4])])\n',
                              'c\n',
                              'c[[2,4]] *= [2,4]\n',
                              'c[[1,3]] *= [2,4]\n',
                              'c[[1,3]]\n',
                              'c[[1,3]] *= transpose(array([2,4]))\n',
                              'transpose(array([2,4]))\n',
                              'c[[1,3]] *= array([2,4], shape(2,1))\n',
                              'c[[1,3]] *= array([2,4], shape((2,1)))\n',
                              'i = array([2,4],shape([2,1]))\n',
                              'i = array([2,4],shape(array([2,1])))\n',
                              'i = reshape(array([2,4]), (2,))\n',
                              'i = reshape(array([[2,4]]), (2,))\n',
                              'range(0)\n',
                              'for i in range(0):\n',
                              '\tprint hmm\n',
                              'i\n',
                              'i[-1]\n',
                              'i[:-1]\n',
                              'repeat(i, (2,2,2))\n',
                              'repeat(i, (1,1,1))\n',
                              'repeat(i, (1))\n',
                              'repeat(i, (2))\n',
                              'repeat(i, 2)\n',
                              'i2 = repeat(i,2)\n',
                              'i2\n',
                              'repeat(i2,2)\n',
                              'repeat(i2,2,1)\n',
                              'repeat(i2,2,0)\n',
                              'repeat(i2,2,2)\n',
                              'a /= 2\n',
                              'index\n',
                              'indexArray = array([array([]) for dim in rang'\
                              'e(4)])\n',
                              'indexArray[0]\n',
                              'indexArray[1]\n',
                              'indexArray[2]\n',
                              'indexArray[3]\n',
                              'indexArray = [array([]) for dim in range(4)]\n',
                              'concatenate((array([1,2,3]), indexArray[0]))\n',
                              'indexArray[0] = concatenate((array([1,2,3]), '\
                              'indexArray[0]))\n',
                              'iList = indexArray[2:]\n',
                              'iLIst\n',
                              'iList[0] = concatenate((array([1,2,3]), iList'\
                              '[0]))\n',
                              'iList\n',
                              'indexArray\n',
                              'a = [0,1,2,3]\n',
                              'a[0:]\n',
                              'a = [0]\n',
                              'a = array([1,2,3])\n',
                              'a[1:]\n',
                              'a[2:]\n',
                              'a[3:]\n',
                              'product(a[3:])\n',
                              'generateArrayIndex([2,2], [0,2], [1], [1])\n',
                              'from GraphUtilities import *\n',
                              'from numarray import *\n',
                              'a = ones([2,2,2])\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([0,1,0,1])],3,axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([1,1,1,1])],3,axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([1,1,1,1])],5,axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([1,1,1,1])],[5,6],axis=(0,1,2))\n',
                              'mask = zeros([2,2,2])\n',
                              'put(mask,[array([0,0,1,1]),array([1,1,1,1]),a'\
                              'rray([1,1,1,1])],1,axis=(0,1,2))\n',
                              'mask\n',
                              'putmask(a,mask,[7,8])\n',
                              'take(a,[array([0,0,1,1]),array([1,1,1,1]),arr'\
                              'ay([1,1,1,1])])\n',
                              'take(a,[array([0,0,1,1]),array([1,1,1,1]),arr'\
                              'ay([1,1,1,1])],axis=(0,1,2))\n',
                              'put(a,[array([0,1]),array([1,1]),array([1,1])'\
                              '],[5,6],axis=(0,1,2))\n',
                              'shape(a)\n',
                              'put(a,generateArrayIndex([2],[0],[1,1],[1,2])'\
                              ',[5,6],axis=(0,1,2))\n',
                              'put(a,generateArrayIndex([2],[0],[1,1],[1,2])'\
                              ',[10,12],axis=(0,1,2))\n',
                              'take(a,[array([0,0,1,1]),array([1,1,1,1]),arr'\
                              'ay([0,1,0,1])],axis=(0,1,2))\n',
                              'put(a,[array([0,0,1,1]),array([1,1,1,1]),arra'\
                              'y([0,1,0,1])],ones([2,2])*4,axis=(0,1,2))\n',
                              'len(3)\n',
                              'a\n',
                              'isinstance(a,types.NumArray)\n',
                              '3.flat\n',
                              'try:\n',
                              '\traise StopIteration\n',
                              'except:\n',
                              '\tprint "we caught the exception"\n']}
debug.var-col-widths = [0.40816326530612246,
                        0.59183673469387754]
edit.dont-ask-to-fix-inconsistent-indents = {loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): 1}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': '93tMYAXvTvXUpWKgA3wuYQzave'\
        'TdGNMz',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (1,),
                           (2,),
                           (3,),
                           (4,),
                           (5,),
                           (8,)],
        'selected-nodes': [(2,
                            1)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': False,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               None)],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [2],
        'notebook_display': 'normal',
        'notebook_percent': 0.35805330243337197,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 15,
                       'selection_start': 15}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 62,
                       'selection_start': 62}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 182,
                       'selection_end': 6057,
                       'selection_start': 6057}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'replace',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': True,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': False,
                                   'WholeWords': True,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 44,
                       'replace-entry-expanded': False,
                       'replace-string': 'Float32',
                       'scope': ['project-files',
                                 None],
                       'search-entry-expanded': False,
                       'search-string': 'setMultipleIndex',
                       'search-style': 'text',
                       'starting-directory': 'c:\\cygwin\\home\\elliot\\trun'\
        'k\\'}),
                     ('debug-data',
                      'wide',
                      0,
                      None),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        'self.CPT.CPT')],
                       'tree-state': {'column-widths': [0.40816326530612246,
        0.59183673469387754],
                                      'expanded-nodes': [(0,),
        (0,
         0),
        (0,
         0,
         0),
        (0,
         0,
         0,
         0),
        (0,
         0,
         0,
         1),
        (0,
         0,
         1),
        (0,
         0,
         1,
         0),
        (0,
         0,
         1,
         1)],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('Distributions/DiscreteDistribution.py'),
        {'first-line': 4,
         'selection_end': 613,
         'selection_start': 613},
        1122692321.9760001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 242,
          'selection_start': 242},
         1122692374.9760001),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 15,
          'selection_end': 399,
          'selection_start': 399},
         1122692379.789),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 97,
          'selection_end': 4051,
          'selection_start': 4051},
         1122692389.007),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 20,
          'selection_end': 927,
          'selection_start': 910},
         1122692401.914),
        (loc('Distributions/DiscreteDistribution.py'),
         {'first-line': 20,
          'selection_end': 927,
          'selection_start': 910},
         1122692402.0699999),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 97,
          'selection_end': 4083,
          'selection_start': 4066},
         1122692405.148),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 97,
          'selection_end': 4083,
          'selection_start': 4066},
         1122692405.336),
        (loc('Graph/Clique.py'),
         {'first-line': 21,
          'selection_end': 1916,
          'selection_start': 1908},
         1122692438.789),
        (loc('Graph/Clique.py'),
         {'first-line': 18,
          'selection_end': 1495,
          'selection_start': 1495},
         1122692438.9449999),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 97,
          'selection_end': 4083,
          'selection_start': 4066},
         1122692458.007),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 93,
          'selection_end': 3314,
          'selection_start': 3314},
         1122692458.211),
        (loc('Graph/JoinTree.py'),
         {'first-line': 36,
          'selection_end': 2522,
          'selection_start': 2506},
         1122692675.1949999),
        (loc('Graph/JoinTree.py'),
         {'first-line': 39,
          'selection_end': 3017,
          'selection_start': 3017},
         1122692675.336),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 15,
          'selection_end': 399,
          'selection_start': 399},
         1122693117.1170001),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 242,
          'selection_start': 242},
         1122693117.7260001),
        (loc('testing/JunctionTreeTest.py'),
         {'first-line': 15,
          'selection_end': 399,
          'selection_start': 399},
         1122693126.1949999),
        (loc('Inference/JunctionTreeEngine.py'),
         {'first-line': 97,
          'selection_end': 4432,
          'selection_start': 4432},
         1122693131.4289999),
        (loc('testing/MainTest.py'),
         {'first-line': 0,
          'selection_end': 242,
          'selection_start': 242},
         1122693336.507),
        [loc('testing/JunctionTreeTest.py'),
         {'first-line': 15,
          'selection_end': 399,
          'selection_start': 399},
         1122693340.8199999]],
        19),
        'current-loc': loc('testing/JunctionTreeTest.py'),
        'editor-states': {loc('Distributions/DiscreteDistribution.py'): {'fi'\
        'rst-line': 20,
        'selection_end': 927,
        'selection_start': 910},
                          loc('Examples/ExampleModels.py'): {'first-line': 39,
        'selection_end': 0,
        'selection_start': 0},
                          loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 445,
        'selection_start': 445},
                          loc('Graph/BayesNode.py'): {'first-line': 0,
        'selection_end': 296,
        'selection_start': 296},
                          loc('Graph/Clique.py'): {'first-line': 18,
        'selection_end': 1495,
        'selection_start': 1495},
                          loc('Graph/DirectedNode.py'): {'first-line': 0,
        'selection_end': 170,
        'selection_start': 170},
                          loc('Graph/JoinTree.py'): {'first-line': 39,
        'selection_end': 3017,
        'selection_start': 3017},
                          loc('Graph/Node.py'): {'first-line': 0,
        'selection_end': 522,
        'selection_start': 522},
                          loc('Graph/Sepset.py'): {'first-line': 0,
        'selection_end': 794,
        'selection_start': 794},
                          loc('Graph/TriangleGraph.py'): {'first-line': 0,
        'selection_end': 678,
        'selection_start': 678},
                          loc('Heap/ClusterBinaryHeap.py'): {'first-line': 6,
        'selection_end': 0,
        'selection_start': 0},
                          loc('Inference/InferenceEngine.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('Inference/JunctionTreeEngine.py'): {'first-li'\
        'ne': 97,
        'selection_end': 4432,
        'selection_start': 4432},
                          loc('testing/JunctionTreeTest.py'): {'first-line': 15,
        'selection_end': 399,
        'selection_start': 399},
                          loc('testing/MainTest.py'): {'first-line': 0,
        'selection_end': 242,
        'selection_start': 242}},
        'has-focus': True},
                               'open_files': [u'Graph/BayesNode.py',
        u'Graph/Node.py',
        u'Graph/DirectedNode.py',
        u'Inference/InferenceEngine.py',
        u'Examples/ExampleModels.py',
        u'General/SequenceGenerator.py',
        u'Graph/TriangleGraph.py',
        u'Graph/Sepset.py',
        u'Heap/ClusterBinaryHeap.py',
        u'Distributions/DiscreteDistribution.py',
        u'Graph/Clique.py',
        u'Graph/JoinTree.py',
        u'Inference/JunctionTreeEngine.py',
        u'testing/MainTest.py',
        u'testing/JunctionTreeTest.py']},
        'split_percents': {0: 0.5},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         1260,
                         974)}]}
guimgr.recent-documents = [loc('testing/JunctionTreeTest.py'),
                           loc('testing/MainTest.py'),
                           loc('Inference/JunctionTreeEngine.py'),
                           loc('Graph/JoinTree.py'),
                           loc('Graph/Clique.py'),
                           loc('Distributions/DiscreteDistribution.py'),
                           loc('Heap/ClusterBinaryHeap.py'),
                           loc('Graph/Sepset.py'),
                           loc('Graph/TriangleGraph.py'),
                           loc('General/SequenceGenerator.py'),
                           loc('Examples/ExampleModels.py'),
                           loc('Inference/InferenceEngine.py'),
                           loc('Graph/DirectedNode.py'),
                           loc('Graph/Node.py'),
                           loc('Graph/BayesNode.py')]
guimgr.visual-state = {loc('Examples/ExampleModels.py'): {'first-line': 12,
        'selection_end': 0,
        'selection_start': 0},
                       loc('General/ArrayIndexGenerator.py'): {'first-line': 0,
        'selection_end': 680,
        'selection_start': 680},
                       loc('General/SequenceGenerator.py'): {'first-line': 0,
        'selection_end': 378,
        'selection_start': 378},
                       loc('General/utilities.py'): {'first-line': 22,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Graph/Clique.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Graph/GraphUtilities.py'): {'first-line': 4,
        'selection_end': 1636,
        'selection_start': 1636},
                       loc('Graph/JoinTree.py'): {'first-line': 23,
        'selection_end': 2235,
        'selection_start': 2235},
                       loc('Graph/Node.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Graph/Sepset.py'): {'first-line': 3,
        'selection_end': 794,
        'selection_start': 794},
                       loc('Graph/TriangleGraph.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Heap/PriorityQueue.py'): {'first-line': 0,
        'selection_end': 422,
        'selection_start': 422},
                       loc('Inference/EnumerationEngine.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Inference/JunctionTreeEngine.py'): {'first-line': 30,
        'selection_end': 0,
        'selection_start': 0},
                       loc('Network/BayesNet.py'): {'first-line': 0,
        'selection_end': 24,
        'selection_start': 24},
                       loc('testing/BayesNetTest.py'): {'first-line': 27,
        'selection_end': 0,
        'selection_start': 0},
                       loc('testing/EnumerationTest.py'): {'first-line': 0,
        'selection_end': 426,
        'selection_start': 396},
                       loc('testing/GraphUtilitiesTest.py'): {'first-line': 0,
        'selection_end': 98,
        'selection_start': 98},
                       loc('testing/JunctionTreeTest.py'): {'first-line': 0,
        'selection_end': 447,
        'selection_start': 400},
                       loc('testing/RandomTests.py'): {'first-line': 0,
        'selection_end': 36,
        'selection_start': 36},
                       loc('../../../../Python24/Lib/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 241,
        'selection_end': 7790,
        'selection_start': 7790},
                       loc('../../../../Python24/Lib/site-packages/numarray/ufunc.py'): {''\
        'first-line': 2154,
        'selection_end': 88911,
        'selection_start': 88911}}
proj.env-vars = {loc('testing/GraphUtilitiesTest.py'): ('project',
        ['']),
                 loc('testing/MainTest.py'): ('project',
        ['']),
                 loc('unknown:untitled-3.py'): ('project',
        ['']),
                 loc('Graph/GraphUtilities.py'): ('project',
        ['']),
                 loc('testing/RandomTests.py'): ('project',
        [''])}
search.replace-history = ['Float64']
search.search-history = ['setMultipleIndex',
                         'setMultipleValues',
                         'setMju',
                         'set',
                         'setValue',
                         'setMultipleValue',
                         'zeros',
                         'ones',
                         'Float64',
                         'Float']
